/* Generated By:JavaCC: Do not edit this line. TrabalhoTipo.java */
import java.util.*;

public class TrabalhoTipo implements TrabalhoTipoConstants {

static Hashtable<Integer, Dado> TabelaSimb = new Hashtable<Integer, Dado>();
static Hashtable<Integer, Dado> TabelaAux = new Hashtable<Integer, Dado>();
static Integer indexTabela = 0;
static Integer nivelCorrente = 0;
static Integer flagBranchStmt = 0;
static Integer nReturn = 0, procedureReturn = 0;
static Integer countArgs = 0;
static Dado dado = new Dado();
static String flagCategoria = "";
static ArrayList <Integer> listaChaves = new ArrayList <Integer> ();
static Token valor = null, tipo = null;
static Integer erro_s = 0;
static String nome_variavel = "", nomeFunc = "";

    public static void main(String[] args){
        try{
            TrabalhoTipo t = new TrabalhoTipo(new java.io.FileInputStream(args[0]));
            t.initBuiltins();
            t.Start();
//            System.out.println("-----------------------------------SIMB----------------------------------");
//            imprimeTabela(TabelaSimb);
//            System.out.println("-----------------------------------AUX-----------------------------------");
//            imprimeTabela(TabelaAux);
            if(erro_s == 0)
                System.out.println("SUCESSO");
            else
                System.out.println("Foram encontrados " + erro_s + " erros");
        } catch (java.io.FileNotFoundException ex) {
            System.out.println("Arquivo " + args[0] + " nao foi encontrado");
        } catch (ParseException ex) {
            System.out.println(ex.getMessage());
        } catch (TokenMgrError ex) {
            System.out.println(ex.getMessage());
        }
    }

/* Programa */
  static final public void Start() throws ParseException {
    Stmtblk();
    jj_consume_token(0);
  }

  static final public void Stmtblk() throws ParseException {
    Statement();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case BREAK:
      case RETURN:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case TYPE:
      case PROCEDURE:
      case CONSTANT:
      case ENUM:
      case SWITCH:
      case CONTINUE:
      case RETRY:
      case EXIT:
      case LOOP:
      case GOTO:
      case IDENTIFIER:
      case 71:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
  }

  static final public void Block() throws ParseException {
    Statementblock();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case BREAK:
      case RETURN:
      case FOR:
      case FOREACH:
      case CONSTANT:
      case ENUM:
      case SWITCH:
      case CONTINUE:
      case RETRY:
      case EXIT:
      case LOOP:
      case GOTO:
      case IDENTIFIER:
      case 71:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Statementblock();
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      Breakstmt();
      break;
    case RETURN:
      Return();
      break;
    case CONTINUE:
      Continuestmt();
      break;
    case RETRY:
      Retrystmt();
      break;
    case EXIT:
      Exitstmt();
      break;
    case FOR:
      Forstmt();
      break;
    case FOREACH:
      Foreachstmt();
      break;
    case WHILE:
      Whilestmt();
      break;
    case LOOP:
      Loopstmt();
      break;
    case GOTO:
      Gotostmt();
      break;
    case IF:
      Ifstmt();
      break;
    case SWITCH:
      Switchstmt();
      break;
    case FUNCTION:
    case TYPE:
    case PROCEDURE:
    case CONSTANT:
    case ENUM:
    case IDENTIFIER:
    case 71:
      Look();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Statementblock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      Breakstmt();
      break;
    case RETURN:
      Return();
      break;
    case CONTINUE:
      Continuestmt();
      break;
    case RETRY:
      Retrystmt();
      break;
    case EXIT:
      Exitstmt();
      break;
    case FOR:
      Forstmt();
      break;
    case FOREACH:
      Foreachstmt();
      break;
    case WHILE:
      Whilestmt();
      break;
    case LOOP:
      Loopstmt();
      break;
    case GOTO:
      Gotostmt();
      break;
    case IF:
      Ifstmt();
      break;
    case SWITCH:
      Switchstmt();
      break;
    case CONSTANT:
    case ENUM:
    case IDENTIFIER:
    case 71:
      Lookblock();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Look() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
      jj_consume_token(71);
      Expression();
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2)) {
        Assignwithop();
      } else if (jj_2_2(2)) {
        Call();
      } else if (jj_2_3(2)) {
        Assignmono();
      } else if (jj_2_4(2)) {
        Assignmulti();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROCEDURE:
          Procdeclare();
          break;
        case FUNCTION:
          Funcdeclare();
          break;
        case TYPE:
          Typedeclare();
          break;
        default:
          jj_la1[5] = jj_gen;
          if (jj_2_5(2)) {
            Vardeclare();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CONSTANT:
              Constdeclare();
              break;
            case ENUM:
              Enumdeclare();
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  static final public void Lookblock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
      jj_consume_token(71);
      Expression();
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_6(2)) {
        Assignwithop();
      } else if (jj_2_7(2)) {
        Call();
      } else if (jj_2_8(2)) {
        Vardeclare();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANT:
          Constdeclare();
          break;
        case ENUM:
          Enumdeclare();
          break;
        default:
          jj_la1[8] = jj_gen;
          if (jj_2_9(2)) {
            Assignmono();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              Assignmulti();
              break;
            default:
              jj_la1[9] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  static final public void Breakstmt() throws ParseException {
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        Stringlit();
        break;
      case ATOMINTEGER:
      case ATOMREAL:
      case ATOMBINARY:
      case ATOMOCTAL:
      case ATOMDECIMAL:
      case ATOMHEXADECIMAL:
        Atomexpr();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void Continuestmt() throws ParseException {
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        Stringlit();
        break;
      case ATOMINTEGER:
      case ATOMREAL:
      case ATOMBINARY:
      case ATOMOCTAL:
      case ATOMDECIMAL:
      case ATOMHEXADECIMAL:
        Atomexpr();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void Retrystmt() throws ParseException {
    jj_consume_token(RETRY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        Stringlit();
        break;
      case ATOMINTEGER:
      case ATOMREAL:
      case ATOMBINARY:
      case ATOMOCTAL:
      case ATOMDECIMAL:
      case ATOMHEXADECIMAL:
        Atomexpr();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void Exitstmt() throws ParseException {
    jj_consume_token(EXIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        Stringlit();
        break;
      case ATOMINTEGER:
      case ATOMREAL:
      case ATOMBINARY:
      case ATOMOCTAL:
      case ATOMDECIMAL:
      case ATOMHEXADECIMAL:
        Atomexpr();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public String Stringlit() throws ParseException {
    jj_consume_token(STRING);
        {if (true) return "object";}
    throw new Error("Missing return statement in function");
  }

  static final public void Forstmt() throws ParseException {
    jj_consume_token(FOR);
    Foridx();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(DO);
        flagBranchStmt++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(FOR);
        removeNivel(TabelaAux, flagBranchStmt);
        listaChaves.clear();
        flagBranchStmt--;
  }

  static final public void Foridx() throws ParseException {
    Token t;
    String s, g, h = "", x;
    t = jj_consume_token(IDENTIFIER);
        naoDeclaradoFluxo(t);
    jj_consume_token(72);
    s = Expression();
    jj_consume_token(TO);
    g = Expression();
        x = checaTipoFluxo(t);
        erroTipo(x, s, t.toString());
        erroTipo(x, g, t.toString());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      h = Expression();
        if(!h.equals("atom") && !h.equals("integer")) {
            erro_s++;
            System.out.println("ERRO! O ciclo esperava o tipo \u005c"atom\u005c" mas recebeu \u005c"" + h + "\u005c".");
        }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
        if(!x.equals("atom") && !x.equals("integer")) {
            erro_s++;
            System.out.println("ERRO! O ciclo esperava o tipo \u005c"atom\u005c" mas recebeu \u005c"" + x + "\u005c".");
        }
        if(!s.equals("atom") && !s.equals("integer")) {
            erro_s++;
            System.out.println("ERRO! O ciclo esperava o tipo \u005c"atom\u005c" mas recebeu \u005c"" + s + "\u005c".");
        }
        if(!g.equals("atom") && !g.equals("integer")) {
            erro_s++;
            System.out.println("ERRO! O ciclo esperava o tipo \u005c"atom\u005c" mas recebeu \u005c"" + g + "\u005c".");
        }
  }

  static final public void Foreachstmt() throws ParseException {
    Token t;
    jj_consume_token(FOREACH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
        naoDeclaradoFluxo(t);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(73);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
        // FIXME t so pode ser sequence
        naoDeclaradoFluxo(t);
        String x = checaTipoFluxo(t);
        erroTipo("sequence", x, t.toString());
      break;
    case 89:
      Seqexpr();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(74);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(DO);
        flagBranchStmt++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(FOREACH);
        removeNivel(TabelaAux, flagBranchStmt);
        listaChaves.clear();
        flagBranchStmt--;
  }

  static final public void Labelstmt() throws ParseException {
    jj_consume_token(LABEL);
    Stringlit();
  }

  static final public void Whilestmt() throws ParseException {
    String t;
    jj_consume_token(WHILE);
    t = Expression();
        if(!t.equals("atom")) {
            erro_s++;
            System.out.println("ERRO! O ciclo esperava o tipo \u005c"boolean\u005c" (atom) mas recebeu \u005c"" + t + "\u005c".");
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(DO);
        flagBranchStmt++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(WHILE);
        removeNivel(TabelaAux, flagBranchStmt);
        listaChaves.clear();
        flagBranchStmt--;
  }

  static final public void Loopstmt() throws ParseException {
    String t;
    jj_consume_token(LOOP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(DO);
        flagBranchStmt++;
    Block();
    jj_consume_token(UNTIL);
    t = Expression();
        if(!t.equals("atom")) {
            erro_s++;
            System.out.println("ERRO! O ciclo esperava o tipo atom mas recebeu \u005c"" + t + "\u005c".");
        }
    jj_consume_token(END);
    jj_consume_token(LOOP);
        removeNivel(TabelaAux, flagBranchStmt);
        listaChaves.clear();
        flagBranchStmt--;
  }

  static final public void Gotostmt() throws ParseException {
    jj_consume_token(GOTO);
    Labelstmt();
  }

  static final public void Ifstmt() throws ParseException {
    Iftest();
    label_3:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_3;
      }
      Elsif();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      Else();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(IF);
        removeNivel(TabelaAux, flagBranchStmt);
        listaChaves.clear();
        flagBranchStmt--;
  }

  static final public void Iftest() throws ParseException {
    String t;
    jj_consume_token(IF);
    t = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(THEN);
        flagBranchStmt++;

        if(!t.equals("atom")) {
            erro_s++;
            System.out.println("ERRO! A condicional esperava o tipo \u005c"boolean\u005c" (atom) mas recebeu \u005c"" + t + "\u005c".");
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  static final public void Elsif() throws ParseException {
    String t;
    jj_consume_token(ELSIF);
        removeNivel(TabelaAux, flagBranchStmt);
        listaChaves.clear();
    t = Expression();
        if(!t.equals("atom")) {
            erro_s++;
            System.out.println("ERRO! O ciclo esperava o tipo \u005c"boolean\u005c" (atom) mas recebeu \u005c"" + t + "\u005c".");
        }
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
  }

  static final public void Else() throws ParseException {
    jj_consume_token(ELSE);
        removeNivel(TabelaAux, flagBranchStmt);
        listaChaves.clear();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
  }

  static final public void Switchstmt() throws ParseException {
    Switchtest();
    label_4:
    while (true) {
      Case();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      Caseelse();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(SWITCH);
        removeNivel(TabelaAux, flagBranchStmt);
        listaChaves.clear();
        flagBranchStmt--;
  }

  static final public void Switchtest() throws ParseException {
    String t;
    jj_consume_token(SWITCH);
    t = Expression();
        if(t.equals("sequence") || t.equals("object")) {
            erro_s++;
            System.out.println("ERRO! A condicional esperava o tipo \u005c"boolean\u005c" (atom) mas recebeu \u005c"" + t + "\u005c".");
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(DO);
        flagBranchStmt++;
  }

  static final public void Case() throws ParseException {
    jj_consume_token(CASE);
    Caselist();
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  static final public void Caselist() throws ParseException {
    String t;
    t = Expression();
        if(t.equals("sequence") || t.equals("object")) {
            erro_s++;
            System.out.println("ERRO! A condicional esperava o tipo \u005c"boolean\u005c" (atom) mas recebeu \u005c"" + t + "\u005c".");
        }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_5;
      }
      jj_consume_token(75);
      t = Expression();
        if(t.equals("sequence") || t.equals("object")) {
            erro_s++;
            System.out.println("ERRO! A condicional esperava o tipo \u005c"boolean\u005c" (atom) mas recebeu \u005c"" + t + "\u005c".");
        }
    }
  }

  static final public void Caseelse() throws ParseException {
    jj_consume_token(ELSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
  }

  static final public void Assignmono() throws ParseException {
    String tipo_esq, tipo_dir;
    tipo_esq = Varexp();
    jj_consume_token(72);
    tipo_dir = Expression();
        erroTipo(tipo_esq, tipo_dir, nome_variavel);
        nome_variavel = "";
  }

  static final public void Assignmulti() throws ParseException {
    Varexp();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_6;
      }
      jj_consume_token(75);
      Varexp();
    }
    jj_consume_token(72);
    Expression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_7;
      }
      jj_consume_token(75);
      Expression();
    }
  }

  static final public void Assignwithop() throws ParseException {
    String tipo_esq, tipo_dir;
    Token op;
    tipo_esq = Varexp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 76:
      op = jj_consume_token(76);
      break;
    case 77:
      op = jj_consume_token(77);
      break;
    case 78:
      op = jj_consume_token(78);
      break;
    case 79:
      op = jj_consume_token(79);
      break;
    case 80:
      op = jj_consume_token(80);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(72);
    tipo_dir = Expression();
        tipo_dir = comparaTipos(tipo_esq, op.toString(), tipo_dir);
        erroTipo(tipo_esq, tipo_dir, nome_variavel);
        nome_variavel = "";
  }

  static final public void Return() throws ParseException {
    String tipo;
    if(flagBranchStmt == 0)
        nReturn++;

    procedureReturn++;
    jj_consume_token(RETURN);
    tipo = Expression();
        if(!nomeFunc.equals("")) {
            Dado func = buscaIdentificador(TabelaSimb, nomeFunc, 0);
            Integer chave = buscaTipo(TabelaSimb, tipo);
            if(chave > -1) {
                func.setTipo(chave);
            }
        }
  }

  static final public void Vardeclare() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        tipo = t;
    Identlist();
        tipo = null;
        atualizaVariavel(t, "var");
  }

  static final public void Identlist() throws ParseException {
    Ident();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_8;
      }
      jj_consume_token(75);
      Ident();
    }
  }

  static final public void Ident() throws ParseException {
    Token t;
    String tipo1 = "";
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 72:
      jj_consume_token(72);
      tipo1 = Expression();
        erroTipo(tipo.toString(), tipo1, t.toString());
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
        Dado tmp = new Dado();
        tmp.setIdentificador(t.toString());

        // Verifica se e uma constante
        if(valor != null && flagCategoria.equals("constant")) {
            tmp.setValor(valor.toString());
            valor = null;
        }

        // Se nao esta dentro de um branch (if, for, etc)
        if(flagBranchStmt == 0) {
            tmp.setNivel(nivelCorrente);
            insereTabela(TabelaSimb, tmp);
        }
        // Se estiver, verifica na tabela auxiliar
        else {
            if(naoDeclarado(TabelaSimb, t.toString(), nivelCorrente)) {
                tmp.setNivel(flagBranchStmt);
                insereTabela(TabelaAux, tmp);
            }
            else {
                System.out.println("Erro! Identificador \u005c"" + tmp.getIdentificador() +  "\u005c" ja declarado");
                erro_s++;
            }
        }
  }

  static final public void Constdeclare() throws ParseException {
    Token t;
    flagCategoria = "constant";
    t = jj_consume_token(CONSTANT);
    Identlist();
        if(flagBranchStmt == 0)
            atualizaCategoria(TabelaSimb, t.toString());
        else
            atualizaCategoria(TabelaAux, t.toString());
        listaChaves.clear();
        flagCategoria = "";
  }

  static final public void Enumdeclare() throws ParseException {
    jj_consume_token(ENUM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
    case IDENTIFIER:
      Enumval();
      break;
    case TYPE:
      Enumtype();
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Enumval() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      Enumdelta();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    Identlist();
        Integer chave = buscaTipo(TabelaSimb, "integer");
        if(flagBranchStmt == 0) {
            atualizaCategoria(TabelaSimb, "constant");
            atualizaTipo(TabelaSimb, chave);
        }
        else {
            atualizaCategoria(TabelaAux, "constant");
            atualizaTipo(TabelaAux, chave);
        }
        listaChaves.clear();
        flagCategoria = "";
  }

  static final public void Enumdelta() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 78:
    case 79:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
        break;
      case 78:
        jj_consume_token(78);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    Expression();
  }

  static final public void Enumtype() throws ParseException {
    Integer chave;
    Dado dado;
    Token t;
    jj_consume_token(TYPE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      Enumdelta();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
        // Neste caso precisa ser do tipo inteiro
        chave = buscaTipo(TabelaSimb, "integer");

        if(chave > -1) {
            dado = new Dado();
            dado.setIdentificador(t.toString());
            dado.setNivel(nivelCorrente);
            dado.setCategoria("type");
            dado.setTipo(chave);

            if(flagBranchStmt == 0)
                insereTabela(TabelaSimb, dado);
            else
                insereTabela(TabelaAux, dado);
        }
        else {
            System.out.println("Erro! Palavra reservada \u005c"" + t.toString() + "\u005c" nao existe");
            erro_s++;
        }
        listaChaves.clear();
    Identlist();
        atualizaVariavel(t, "constant");
    jj_consume_token(END);
    jj_consume_token(TYPE);
  }

  static final public void Procdeclare() throws ParseException {
    Dado dado;
    Token t, s;
    t = jj_consume_token(PROCEDURE);
    s = jj_consume_token(IDENTIFIER);
        dado = new Dado();
        dado.setIdentificador(s.toString());
        dado.setNivel(nivelCorrente);
        dado.setCategoria(t.toString());

        insereTabela(TabelaSimb, dado);
        listaChaves.clear();
        nivelCorrente++;
    jj_consume_token(73);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Paramlist();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(74);
        dado.setNParametros(listaChaves.size());
        // Adiciona os parametros em uma lista para recuperar depois na checagem de tipos
        if(listaChaves.size() > 0) {
            for(Integer key : listaChaves) {
                dado.setArgs(TabelaSimb.get(key));
            }
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(PROCEDURE);
        if(procedureReturn > 0){
            System.out.println("Erro! Procedure nao pode ter return!!");
            erro_s++;
        }

        procedureReturn = 0;
        removeNivel(TabelaSimb, nivelCorrente);
        listaChaves.clear();
        nivelCorrente--;
  }

  static final public void Paramlist() throws ParseException {
    Parameter();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_9;
      }
      jj_consume_token(75);
      Parameter();
    }
  }

  static final public void Parameter() throws ParseException {
    Dado dado;
    Token t, n;
    t = jj_consume_token(IDENTIFIER);
    n = jj_consume_token(IDENTIFIER);
        Integer chave = buscaTipo(TabelaSimb, t.toString());

        if(chave > -1) {
            dado = new Dado();
            dado.setIdentificador(n.toString());
            dado.setNivel(nivelCorrente);
            dado.setTipo(chave);
            dado.setCategoria("parameter");

            insereTabela(TabelaSimb, dado);
        }
        else {
            System.out.println("Erro! Palavra reservada \u005c"" + t.toString() + "\u005c" nao existe");
            erro_s++;
        }
  }

  static final public void Funcdeclare() throws ParseException {
    Dado dado;
    Token t, s;
    t = jj_consume_token(FUNCTION);
    s = jj_consume_token(IDENTIFIER);
        dado = new Dado();
        dado.setIdentificador(s.toString());
        dado.setNivel(nivelCorrente);
        dado.setCategoria(t.toString());

        insereTabela(TabelaSimb, dado);
        nomeFunc = s.toString();
        listaChaves.clear();
        nivelCorrente++;
    jj_consume_token(73);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Paramlist();
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    jj_consume_token(74);
        dado.setNParametros(listaChaves.size());
        // Adiciona os parametros em uma lista para recuperar depois na checagem de tipos
        if(listaChaves.size() > 0) {
            for(Integer key : listaChaves) {
                dado.setArgs(TabelaSimb.get(key));
            }
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(FUNCTION);
        if(nReturn < 1){
            System.out.println("Erro! Function precisa de retorno!");
            erro_s++;
        }
        nReturn = 0;
        removeNivel(TabelaSimb, nivelCorrente);
        nomeFunc = "";
        listaChaves.clear();
        nivelCorrente--;
  }

  static final public void Typedeclare() throws ParseException {
    Token t, s;
    s = jj_consume_token(TYPE);
    t = jj_consume_token(IDENTIFIER);
        dado = new Dado();
        dado.setIdentificador(t.toString());
        dado.setNivel(nivelCorrente);
        dado.setCategoria(s.toString());

        insereTabela(TabelaSimb, dado);
        listaChaves.clear();
        nivelCorrente++;
    jj_consume_token(73);
    Parameter();
    jj_consume_token(74);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 71:
      Block();
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(TYPE);
        if(nReturn < 1){
            System.out.println("Erro! Type precisa de retorno!");
            erro_s++;
        }
        nReturn = 0;

        removeNivel(TabelaSimb, nivelCorrente);
        listaChaves.clear();
        nivelCorrente--;
  }

  static final public String Expression() throws ParseException {
    String t;
    t = Binexpr();
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public String Binexpr() throws ParseException {
    String tipo1 = "", tipo2 = "", operacao = "";
    tipo1 = Relexpr();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case XOR:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_10;
      }
      operacao = Binop();
      tipo2 = Relexpr();
        tipo1 = comparaTipos(tipo1, operacao, tipo2);
    }
        {if (true) return tipo1;}
    throw new Error("Missing return statement in function");
  }

  static final public String Binop() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
        {if (true) return t.toString();}
      break;
    case OR:
      t = jj_consume_token(OR);
        {if (true) return t.toString();}
      break;
    case XOR:
      t = jj_consume_token(XOR);
        {if (true) return t.toString();}
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Relexpr() throws ParseException {
    String tipo1 = "", tipo2 = "", operacao = "";
    tipo1 = Concatexpr();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_11;
      }
      operacao = Relop();
      tipo2 = Concatexpr();
        tipo1 = comparaTipos(tipo1, operacao, tipo2);
    }
        {if (true) return tipo1;}
    throw new Error("Missing return statement in function");
  }

  static final public String Relop() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 81:
      t = jj_consume_token(81);
        {if (true) return t.toString();}
      break;
    case 82:
      t = jj_consume_token(82);
        {if (true) return t.toString();}
      break;
    case 83:
      t = jj_consume_token(83);
        {if (true) return t.toString();}
      break;
    case 84:
      t = jj_consume_token(84);
        {if (true) return t.toString();}
      break;
    case 72:
      t = jj_consume_token(72);
        {if (true) return t.toString();}
      break;
    case 85:
      t = jj_consume_token(85);
        {if (true) return t.toString();}
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Concatexpr() throws ParseException {
    String tipo1 = "", tipo2 = "", operacao = "";
    tipo1 = Sumsubexpr();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_12;
      }
      operacao = Concat();
      tipo2 = Sumsubexpr();
        tipo1 = comparaTipos(tipo1, operacao, tipo2);
    }
        {if (true) return tipo1;}
    throw new Error("Missing return statement in function");
  }

  static final public String Concat() throws ParseException {
    Token t;
    t = jj_consume_token(80);
        {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String Sumsubexpr() throws ParseException {
    String tipo1 = "", tipo2 = "", operacao = "";
    tipo1 = Multidivexpr();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
      case 77:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_13;
      }
      operacao = Sumsub();
      tipo2 = Multidivexpr();
        tipo1 = comparaTipos(tipo1, operacao, tipo2);
    }
        {if (true) return tipo1;}
    throw new Error("Missing return statement in function");
  }

  static final public String Sumsub() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 76:
      t = jj_consume_token(76);
        {if (true) return t.toString();}
      break;
    case 77:
      t = jj_consume_token(77);
        {if (true) return t.toString();}
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Multidivexpr() throws ParseException {
    String tipo1 = "", tipo2 = "", operacao = "";
    tipo1 = Unaryexpr();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
      case 79:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_14;
      }
      operacao = Multidiv();
      tipo2 = Unaryexpr();
        tipo1 = comparaTipos(tipo1, operacao, tipo2);
    }
        {if (true) return tipo1;}
    throw new Error("Missing return statement in function");
  }

  static final public String Multidiv() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 79:
      t = jj_consume_token(79);
        {if (true) return t.toString();}
      break;
    case 78:
      t = jj_consume_token(78);
        {if (true) return t.toString();}
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Unaryexpr() throws ParseException {
    String tipo1 = "", operacao = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case 76:
    case 77:
      operacao = Unaryop();
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    tipo1 = Lastexpr();
        {if (true) return tipo1;}
    throw new Error("Missing return statement in function");
  }

  static final public String Unaryop() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
        {if (true) return t.toString();}
      break;
    case 77:
      t = jj_consume_token(77);
        {if (true) return t.toString();}
      break;
    case 76:
      t = jj_consume_token(76);
        {if (true) return t.toString();}
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Lastexpr() throws ParseException {
    Token t;
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      s = Atomexpr();
        {if (true) return s;}
      break;
    case STRING:
      s = Stringlit();
        {if (true) return s;}
      break;
    case BIN:
      jj_consume_token(BIN);
        {if (true) return "atom";}
      break;
    case 89:
      Seqexpr();
        {if (true) return "sequence";}
      break;
    case 73:
      jj_consume_token(73);
      s = Expression();
      jj_consume_token(74);
        {if (true) return s;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
      case 86:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 86:
          Variable(t);
          break;
        case 73:
          Callf(t);
        if(naoDeclarado(TabelaSimb, t.toString(), 0)) {
            System.out.println("Erro! A funcao \u005c"" + t.toString() + "\u005c" nao foi declarada!\u005cn");
            erro_s++;
        }

        String Categoria = buscaCategoria(TabelaSimb, t.toString(), 0);

        if(Categoria != null && !Categoria.equals("function")) {
            System.out.println("Erro! O procedure \u005c"" + t.toString() + "\u005c" nao retorna nenhum valor.\u005cn");
            erro_s++;
        }
        Dado func = buscaIdentificador(TabelaSimb, t.toString(), 0);
        {if (true) return TabelaSimb.get(func.getTipo()).getIdentificador();}
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
        naoDeclaradoFluxo(t);
        s = checaTipoFluxo(t);
        {if (true) return s;}
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Variable(Token t) throws ParseException {
    String tipo = "";
    if (jj_2_11(3)) {
      Slice();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 86:
        label_15:
        while (true) {
          jj_consume_token(86);
          tipo = Expression();
          jj_consume_token(87);
        erroTipo("integer", tipo, t.toString());
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 86:
            ;
            break;
          default:
            jj_la1[69] = jj_gen;
            break label_15;
          }
        }
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public String Varexp() throws ParseException {
    Token t;
    String s;
    t = jj_consume_token(IDENTIFIER);
        nome_variavel = t.toString();
        s = checaTipoFluxo(t);
        {if (true) return s;}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 86:
      if (jj_2_12(3)) {
        Slice();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 86:
          label_16:
          while (true) {
            jj_consume_token(86);
            Expression();
            jj_consume_token(87);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 86:
              ;
              break;
            default:
              jj_la1[71] = jj_gen;
              break label_16;
            }
          }
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
        naoDeclaradoFluxo(t);
    throw new Error("Missing return statement in function");
  }

  static final public void Slice() throws ParseException {
    jj_consume_token(86);
    Expression();
    jj_consume_token(88);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case STRING:
    case IDENTIFIER:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
    case BIN:
    case 73:
    case 76:
    case 77:
    case 89:
      Expression();
      break;
    case DOLAR:
      jj_consume_token(DOLAR);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(87);
  }

  static final public void Seqexpr() throws ParseException {
    jj_consume_token(89);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case STRING:
    case IDENTIFIER:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
    case BIN:
    case 73:
    case 76:
    case 77:
    case 89:
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
      case 75:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 75:
          label_17:
          while (true) {
            jj_consume_token(75);
            Expression();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 75:
              ;
              break;
            default:
              jj_la1[75] = jj_gen;
              break label_17;
            }
          }
          break;
        case DOLAR:
          jj_consume_token(DOLAR);
          break;
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(90);
  }

  static final public void Call() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        if(naoDeclarado(TabelaSimb, t.toString(), 0)) {
            System.out.println("Erro! A funcao \u005c"" + t.toString() + "\u005c" nao foi declarada!\u005cn");
            erro_s++;
        }
    jj_consume_token(73);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case STRING:
    case IDENTIFIER:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
    case BIN:
    case 73:
    case 76:
    case 77:
    case 89:
      Arglist(t);
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(74);
        Integer nParam = getNParametros(TabelaSimb, t.toString(), 0);

        if(nParam != countArgs){
            System.out.println("Erro! " + t.toString() + " esperava " + nParam + " argumentos mas recebeu " + countArgs + " .");
            erro_s++;
        }
        countArgs = 0;
  }

  static final public void Callf(Token t) throws ParseException {
    jj_consume_token(73);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case STRING:
    case IDENTIFIER:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
    case BIN:
    case 73:
    case 76:
    case 77:
    case 89:
      Arglist(t);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    jj_consume_token(74);
        Integer nParam = getNParametros(TabelaSimb, t.toString(), 0);

        if(nParam != countArgs){
            System.out.println("Erro! " + t.toString() + " esperava " + nParam + " argumentos mas recebeu " + countArgs + " .");
            erro_s++;
        }
        countArgs = 0;
  }

  static final public void Arglist(Token t) throws ParseException {
   Dado d = buscaIdentificador(TabelaSimb, t.toString(), nivelCorrente);
   ArrayList <Dado> lista = d.getArgs();
   String s, v;
    s = Expression();
    if(!lista.isEmpty())
    {
        Integer chave = lista.get(countArgs).getTipo();
        v = TabelaSimb.get(chave).getIdentificador();

        erroTipo(v, s, t.toString());
    }
    countArgs++;
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_18;
      }
      jj_consume_token(75);
      s = Expression();
    Integer chave = lista.get(countArgs).getTipo();
    v = TabelaSimb.get(chave).getIdentificador();

    erroTipo(v, s, t.toString());
    countArgs++;
    }
  }

  static final public void Objexpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      Atomexpr();
      break;
    case 89:
      Seqexpr();
      break;
    case STRING:
      jj_consume_token(STRING);
        if(tipo != null && !tipo.toString().equals("object"))
            System.out.println("ERRO! O tipo esperado da variavel deveria ser \u005c"" + tipo.toString() + "\u005c".");
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public String Atomexpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOMINTEGER:
      jj_consume_token(ATOMINTEGER);
        {if (true) return "integer";}
      break;
    case ATOMREAL:
      jj_consume_token(ATOMREAL);
        {if (true) return "atom";}
      break;
    case ATOMBINARY:
      jj_consume_token(ATOMBINARY);
        {if (true) return "atom";}
      break;
    case ATOMOCTAL:
      jj_consume_token(ATOMOCTAL);
        {if (true) return "atom";}
      break;
    case ATOMDECIMAL:
      jj_consume_token(ATOMDECIMAL);
        {if (true) return "atom";}
      break;
    case ATOMHEXADECIMAL:
      jj_consume_token(ATOMHEXADECIMAL);
        {if (true) return "atom";}
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Funcoes Auxiliares */
  static final public boolean naoDeclarado(Hashtable<Integer, Dado> tabela, String Identificador, Integer NivelProcurado) throws ParseException {
    Enumeration t = tabela.keys();
    Integer chave;
    Dado dado;
        while (t.hasMoreElements()) {
            chave = (Integer)t.nextElement();
            dado = tabela.get(chave);

            if(dado.getIdentificador().equals(Identificador) && dado.getNivel() == NivelProcurado){
                {if (true) return false;}/* ja existe na tabela*/
            }
        }
        /* pode ser adicionado futuramente na tabela */
        {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  static final public void naoDeclaradoFluxo(Token t) throws ParseException {
        if(naoDeclarado(TabelaSimb, t.toString(), nivelCorrente)) {
            int i = 0;
            for(i = flagBranchStmt; naoDeclarado(TabelaAux, t.toString(), i) && i > 0; i--);

            if(i == 0){
                System.out.println("Erro! Variavel \u005c"" + t.toString() + "\u005c" nao declarada no nivel atual!");
                erro_s++;
            }
        }
  }

  static final public void insereTabela(Hashtable<Integer, Dado> tabela, Dado dado) throws ParseException {
        if(naoDeclarado(tabela, dado.getIdentificador(), dado.getNivel())){
            tabela.put(indexTabela, dado);
            listaChaves.add(indexTabela);
            indexTabela++;
        }
        else {
            System.out.println("Erro! Identificador \u005c"" + dado.getIdentificador() +  "\u005c" js declarado no nivel atual");
            erro_s++;
        }
  }

  static final public Integer buscaTipo(Hashtable<Integer, Dado> tabela, String Identificador) throws ParseException {
    Integer chave;
    Enumeration elemento = tabela.keys();
    Dado dado;
        while(elemento.hasMoreElements()) {
            chave = (Integer) elemento.nextElement();
            dado = tabela.get(chave);

            if(dado.getIdentificador().equals(Identificador) && dado.getCategoria().equals("type"))
                {if (true) return chave;}
        }
        {if (true) return -1;}
    throw new Error("Missing return statement in function");
  }

  static final public Dado buscaIdentificador(Hashtable<Integer, Dado> tabela, String Identificador, Integer Nivel) throws ParseException {
    Integer chave;
    Enumeration elemento = tabela.keys();
    Dado dado;
        while(elemento.hasMoreElements()) {
            chave = (Integer) elemento.nextElement();
            dado = tabela.get(chave);

            if(dado.getIdentificador().equals(Identificador) && dado.getNivel() == Nivel)
                {if (true) return dado;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public String buscaCategoria(Hashtable<Integer, Dado> tabela, String Identificador, Integer Nivel) throws ParseException {
    Integer chave;
    Enumeration elemento = tabela.keys();
    Dado dado;
        while(elemento.hasMoreElements()) {
            chave = (Integer) elemento.nextElement();
            dado = tabela.get(chave);

            if(dado.getIdentificador().equals(Identificador) && dado.getNivel() == Nivel)
                {if (true) return dado.getCategoria();}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Integer getNParametros(Hashtable<Integer, Dado> tabela, String Identificador, Integer Nivel) throws ParseException {
    Integer chave;
    Enumeration elemento = tabela.keys();
    Dado dado;
        while(elemento.hasMoreElements()) {
            chave = (Integer) elemento.nextElement();
            dado = tabela.get(chave);

            if(dado.getIdentificador().equals(Identificador) && Nivel == dado.getNivel())
                {if (true) return dado.getNParametros();}
        }

        {if (true) return -1;}
    throw new Error("Missing return statement in function");
  }

  static final public void imprimeTabela(Hashtable<Integer, Dado> tabela) throws ParseException {
    Integer chave;
    Enumeration elemento = tabela.keys();
    Dado dado;
        System.out.printf("%-4s%-10s%-6s%-10s%-6s%-6s%-6s%-6s%-10s%-10s\u005cn", "ID", "IDENT", "NIVEL", "CATEGORIA", "TIPO", "END", "NBYTE", "VALOR", "CLASST", "NPARAM");
        System.out.println("----------------------------------------------------------------------------");
        while(elemento.hasMoreElements()) {
            chave = (Integer) elemento.nextElement();
            dado = tabela.get(chave);

            System.out.printf("%-4s%-10s%-6s%-10s%-6s%-6s%-6s%-6s%-10s%-10s\u005cn",
                              chave, dado.getIdentificador(), dado.getNivel(),
                              dado.getCategoria(), dado.getTipo(), dado.getEndereco(),
                              dado.getNBytes(), dado.getValor(), dado.getClasseTransf(),
                              dado.getNParametros());
            if(dado.getArgs().size() > 0) {
                System.out.println("---------------------------ARG LIST---------------------------------------------");
            }
            for(Dado param : dado.getArgs())
                System.out.printf("%-4s%-10s%-6s%-10s%-6s%-6s%-6s%-6s%-10s%-10s\u005cn",
                                  chave, param.getIdentificador(), param.getNivel(),
                                  param.getCategoria(), param.getTipo(), param.getEndereco(),
                                  param.getNBytes(), param.getValor(), param.getClasseTransf(),
                                  param.getNParametros());

            if(dado.getArgs().size() > 0) {
                System.out.println("-----------------------FIM ARG LIST---------------------------------------------");
            }
        }

        System.out.println("");
  }

  static final public void atualizaCategoria(Hashtable<Integer, Dado> tabela,String Categoria) throws ParseException {
    Dado dado;
        for(Integer chave : listaChaves)
        {
            dado = tabela.get(chave);
            dado.setCategoria(Categoria);
        }
  }

  static final public void atualizaTipo(Hashtable<Integer, Dado> tabela, Integer Tipo) throws ParseException {
    Dado dado;
        for(Integer chave : listaChaves)
        {
            dado = tabela.get(chave);
            dado.setTipo(Tipo);
        }
  }

  static final public void atualizaNParam(Hashtable<Integer, Dado> tabela, Integer n) throws ParseException {
    Dado dado;
        for(Integer chave : listaChaves)
        {
            dado = tabela.get(chave);
            dado.setNParametros(n);
        }
  }

  static final public void atualizaNBytes(Hashtable<Integer, Dado> tabela, Integer nbytes) throws ParseException {
    Dado dado;
        for(Integer chave : listaChaves)
        {
            dado = tabela.get(chave);
            dado.setNBytes(nbytes);
        }
  }

  static final public void removeNivel(Hashtable<Integer, Dado> tabela, Integer nivel) throws ParseException {
    Integer chave;
    Enumeration t = tabela.keys();
    Dado dado;
        while(t.hasMoreElements())
        {
            chave = (Integer) t.nextElement();
            dado = tabela.get(chave);

            if(dado.getNivel() == nivel) {
                tabela.remove(chave);
            }
        }
  }

  static final public void removeChaves(Hashtable<Integer, Dado> tabela, ArrayList<Integer> chaves) throws ParseException {
        for(Integer chave : chaves) {
            tabela.remove(chave);
        }
  }

  static final public void atualizaVariavel(Token t, String Categoria) throws ParseException {
        Hashtable <Integer, Dado> tabela = TabelaSimb;
        Integer chave = buscaTipo(TabelaSimb, t.toString());

        if(chave == -1) {
            tabela = TabelaAux;
            chave = buscaTipo(tabela, t.toString());
        }

        if(chave > -1) {
            Dado builtin = tabela.get(chave);
            if(flagBranchStmt == 0) {
                atualizaTipo(TabelaSimb, chave);
                atualizaNBytes(TabelaSimb, builtin.getNBytes());
                atualizaCategoria(TabelaSimb, Categoria);
            }
            else {
                atualizaTipo(TabelaAux, chave);
                atualizaNBytes(TabelaAux, builtin.getNBytes());
                atualizaCategoria(TabelaAux, Categoria);
            }
        }
        else {
            System.out.println("Erro! O tipo \u005c"" + t.toString() + "\u005c" nao existe!\u005cn");
            erro_s++;

            if(flagBranchStmt == 0)
                removeChaves(TabelaSimb, listaChaves);
            else
                removeChaves(TabelaAux, listaChaves);
        }
        listaChaves.clear();
  }

  static final public String comparaTipos(String tipo1, String operacao, String tipo2) throws ParseException {
        if(operacao.equals("+") || operacao.equals("-") || operacao.equals("*")){
            if(tipo1.equals("integer") && tipo2.equals("integer"))
                {if (true) return "integer";}

            if(tipo1.equals("atom") && tipo2.equals("atom"))
                {if (true) return "atom";}

            if(tipo1.equals("object") && tipo2.equals("object"))
                {if (true) return "object";}

            if(tipo1.equals("sequence") && tipo2.equals("sequence"))
                {if (true) return "sequence";}

            if((tipo1.equals("atom") && tipo2.equals("integer")) || (tipo1.equals("integer") && tipo2.equals("atom")))
                {if (true) return "atom";}

            if((tipo1.equals("object") && tipo2.equals("integer")) || (tipo1.equals("integer") && tipo2.equals("object")))
                {if (true) return "object";}

            if((tipo1.equals("object") && tipo2.equals("atom")) || (tipo1.equals("atom") && tipo2.equals("object")))
                {if (true) return "object";}

            if((tipo1.equals("sequence") && tipo2.equals("integer")) || (tipo1.equals("integer") && tipo2.equals("sequence")))
                {if (true) return "sequence";}

            if((tipo1.equals("sequence") && tipo2.equals("atom")) || (tipo1.equals("atom") && tipo2.equals("sequence")))
                {if (true) return "sequence";}

            if((tipo1.equals("sequence") && tipo2.equals("object")) || (tipo1.equals("object") && tipo2.equals("sequence")))
                {if (true) return "sequence";}

        }
        if(operacao.equals("/")){
            if(tipo1.equals("integer") && tipo2.equals("integer"))
                {if (true) return "atom";}

            if(tipo1.equals("atom") && tipo2.equals("atom"))
                {if (true) return "atom";}

            if(tipo1.equals("object") && tipo2.equals("object"))
                {if (true) return "object";}

            if(tipo1.equals("sequence") && tipo2.equals("sequence"))
                {if (true) return "sequence";}

            if((tipo1.equals("atom") && tipo2.equals("integer")) || (tipo1.equals("integer") && tipo2.equals("atom")))
                {if (true) return "atom";}

            if((tipo1.equals("object") && tipo2.equals("integer")) || (tipo1.equals("integer") && tipo2.equals("object")))
                {if (true) return "object";}

            if((tipo1.equals("object") && tipo2.equals("atom")) || (tipo1.equals("atom") && tipo2.equals("object")))
                {if (true) return "object";}

            if((tipo1.equals("sequence") && tipo2.equals("integer")) || (tipo1.equals("integer") && tipo2.equals("sequence")))
                {if (true) return "sequence";}

            if((tipo1.equals("sequence") && tipo2.equals("atom")) || (tipo1.equals("atom") && tipo2.equals("sequence")))
                {if (true) return "sequence";}

            if((tipo1.equals("sequence") && tipo2.equals("object")) || (tipo1.equals("object") && tipo2.equals("sequence")))
                {if (true) return "sequence";}
        }
        if(operacao.equals("and") || operacao.equals("or") || operacao.equals("xor") || operacao.equals(">")
           || operacao.equals("<") || operacao.equals(">=") || operacao.equals("<=") || operacao.equals("=")
           || operacao.equals("!=") || operacao.equals("not")){
            if(tipo1.equals("sequence") && tipo2.equals("sequence"))
                {if (true) return "sequence";}

            if((tipo1.equals("sequence") && tipo2.equals("integer")) || (tipo1.equals("integer") && tipo2.equals("sequence")))
                {if (true) return "sequence";}

            if((tipo1.equals("sequence") && tipo2.equals("atom")) || (tipo1.equals("atom") && tipo2.equals("sequence")))
                {if (true) return "sequence";}

            if((tipo1.equals("sequence") && tipo2.equals("object")) || (tipo1.equals("object") && tipo2.equals("sequence")))
                {if (true) return "sequence";}
            else
                {if (true) return "atom";}
        }
        if(operacao.equals("&")){
            {if (true) return "sequence";}
        }
        {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  static final public void erroTipo(String tipo_esq, String tipo_dir, String variavel) throws ParseException {
        if(!tipo_esq.equals(tipo_dir)) {
            if(tipo_esq.equals("integer") && (tipo_dir.equals("atom") || tipo_dir.equals("object") || tipo_dir.equals("sequence"))) {
                erro_s++;
                System.out.println("ERRO! A variavel \u005c"" + variavel + "\u005c" esperava o tipo \u005c"" + tipo_esq + "\u005c" mas recebeu \u005c"" + tipo_dir + "\u005c".");
            }
            else if(tipo_esq.equals("atom") && (tipo_dir.equals("object") || tipo_dir.equals("sequence"))) {
                erro_s++;
                System.out.println("ERRO! A variavel \u005c"" + variavel + "\u005c" esperava o tipo \u005c"" + tipo_esq + "\u005c" mas recebeu \u005c"" + tipo_dir + "\u005c".");
            }
            else if(tipo_esq.equals("sequence") && (tipo_dir.equals("object") || tipo_dir.equals("atom") || tipo_dir.equals("integer"))) {
                erro_s++;
                System.out.println("ERRO! A variavel \u005c"" + variavel + "\u005c" esperava o tipo \u005c"" + tipo_esq + "\u005c" mas recebeu \u005c"" + tipo_dir + "\u005c".");
            }
        }
  }

  static final public void initBuiltins() throws ParseException {
        //Atom
        Dado atom = new Dado();
        atom.setIdentificador("atom");
        atom.setCategoria("type");
        atom.setTipo(indexTabela);
        // FIXME: Definir o tamanho em bytes
        atom.setNBytes(5);
        atom.setNivel(0);

        insereTabela(TabelaSimb, atom);

        //Integer
        Dado integer = new Dado();
        integer.setIdentificador("integer");
        integer.setCategoria("type");
        integer.setTipo(indexTabela);
        // FIXME: Definir o tamanho em bytes
        integer.setNBytes(4);
        integer.setNivel(0);

        insereTabela(TabelaSimb, integer);

        Dado sequence = new Dado();
        sequence.setIdentificador("sequence");
        sequence.setCategoria("type");
        sequence.setTipo(indexTabela);
        sequence.setNivel(0);

        insereTabela(TabelaSimb, sequence);

        Dado object = new Dado();
        object.setIdentificador("object");
        object.setCategoria("type");
        object.setTipo(indexTabela);
        object.setNivel(0);

        insereTabela(TabelaSimb, object);
        //?
        Dado question = new Dado();
        question.setIdentificador("?");
        question.setCategoria("procedure");
        question.setTipo(indexTabela);
        question.setNivel(0);

        insereTabela(TabelaSimb, question);

        //print
        Dado print = new Dado();
        print.setIdentificador("print");
        print.setCategoria("procedure");
        print.setNParametros(3);
        print.setTipo(indexTabela);
        print.setNivel(0);

        insereTabela(TabelaSimb, print);

        //puts
        Dado puts = new Dado();
        puts.setIdentificador("puts");
        puts.setCategoria("procedure");
        puts.setNParametros(2);
        puts.setTipo(indexTabela);
        puts.setNivel(0);

        insereTabela(TabelaSimb, puts);

        Dado printf = new Dado();
        printf.setIdentificador("printf");
        printf.setCategoria("procedure");
        printf.setNParametros(3);
        printf.setTipo(indexTabela);
        printf.setNivel(0);

        insereTabela(TabelaSimb, printf);
        Dado length = new Dado();
        length.setIdentificador("length");
        length.setCategoria("function");
        length.setNParametros(1);
        length.setTipo(indexTabela);
        length.setNivel(0);

        insereTabela(TabelaSimb, length);

        Dado getc = new Dado();
        getc.setIdentificador("getc");
        getc.setCategoria("function");
        getc.setNParametros(1);
        getc.setTipo(indexTabela);
        getc.setNivel(0);

        insereTabela(TabelaSimb, getc);

        Dado find = new Dado();
        find.setIdentificador("find");
        find.setCategoria("function");
        find.setNParametros(3);
        find.setTipo(indexTabela);
        find.setNivel(0);

        insereTabela(TabelaSimb, find);

        Dado sprintf = new Dado();
        sprintf.setIdentificador("sprintf");
        sprintf.setCategoria("function");
        sprintf.setNParametros(2);
        sprintf.setTipo(indexTabela);
        sprintf.setNivel(0);

        insereTabela(TabelaSimb, sprintf);

        Dado rand = new Dado();
        rand.setIdentificador("rand");
        rand.setCategoria("function");
        rand.setNParametros(1);
        rand.setTipo(indexTabela);
        rand.setNivel(0);

        insereTabela(TabelaSimb, rand);

        Dado sqrt = new Dado();
        sqrt.setIdentificador("sqrt");
        sqrt.setCategoria("function");
        sqrt.setNParametros(1);
        sqrt.setTipo(indexTabela);
        sqrt.setNivel(0);

        insereTabela(TabelaSimb, sqrt);

        Dado tan = new Dado();
        tan.setIdentificador("tan");
        tan.setCategoria("function");
        tan.setNParametros(1);
        tan.setTipo(indexTabela);
        tan.setNivel(0);

        insereTabela(TabelaSimb, tan);

        Dado sin = new Dado();
        sin.setIdentificador("sin");
        sin.setCategoria("function");
        sin.setNParametros(1);
        sin.setTipo(indexTabela);
        sin.setNivel(0);

        insereTabela(TabelaSimb, sin);

        Dado cos = new Dado();
        cos.setIdentificador("cos");
        cos.setCategoria("function");
        cos.setNParametros(1);
        cos.setTipo(indexTabela);
        cos.setNivel(0);

        insereTabela(TabelaSimb, cos);

        Dado log = new Dado();
        log.setIdentificador("log");
        log.setCategoria("function");
        log.setNParametros(1);
        log.setTipo(indexTabela);
        log.setNivel(0);

        insereTabela(TabelaSimb, log);

        Dado power = new Dado();
        power.setIdentificador("power");
        power.setCategoria("function");
        power.setNParametros(2);
        power.setTipo(indexTabela);
        power.setNivel(0);

        insereTabela(TabelaSimb, power);

        listaChaves.clear();
  }

  static final public String checaTipoFluxo(Token t) throws ParseException {
    Dado temp;
    Dado dado_tipo;
    Integer chave;
        // Se nao esta dentro de um branch (if, for, etc)
        if(flagBranchStmt == 0) {

            temp = buscaIdentificador(TabelaSimb, t.toString(), nivelCorrente);
            if(temp != null){
                chave = temp.getTipo();
                dado_tipo = TabelaSimb.get(chave);
                {if (true) return dado_tipo.getIdentificador();}
            }
            else{
                {if (true) return "";}
            }
        }
        else{
            if(naoDeclarado(TabelaSimb, t.toString(), nivelCorrente)){
                int i = 0;
                for(i = flagBranchStmt; naoDeclarado(TabelaAux, t.toString(), i) && i > 0; i--);
                if(i != 0){
                    temp = buscaIdentificador(TabelaAux, t.toString(), i);
                    chave = temp.getTipo();
                    dado_tipo = TabelaSimb.get(chave);
                    {if (true) return dado_tipo.getIdentificador();}
                }
                else{
                    {if (true) return "";}
                }
            }
            else{
                temp = buscaIdentificador(TabelaSimb, t.toString(), nivelCorrente);
                chave = temp.getTipo();
                dado_tipo = TabelaSimb.get(chave);
                {if (true) return dado_tipo.getIdentificador();}
            }
        }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(ATOMHEXADECIMAL)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(ATOMDECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(ATOMOCTAL)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(ATOMBINARY)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(ATOMREAL)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(ATOMINTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(ELSIF)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    if (jj_3R_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(89)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(86)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(88)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    Token xsp;
    if (jj_3R_91()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(BIN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TrabalhoTipoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[84];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x38bff400,0x38b1f400,0x38bff400,0x38b1f400,0x0,0xe0000,0x300000,0x0,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38b1f400,0x400000,0x0,0x0,0x0,0x38b1f400,0x0,0x38b1f400,0x0,0x200,0x0,0x38b1f400,0x38b1f400,0x38b1f400,0x4000000,0x200,0x0,0x38b1f400,0x0,0x38b1f400,0x0,0x0,0x0,0x0,0x0,0x440000,0x400000,0x0,0x0,0x400000,0x0,0x38b1f400,0x0,0x0,0x38b1f400,0x38b1f400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80000600,0x80000600,0x80000600,0x80000600,0x0,0x0,0x0,0x0,0x0,0x80000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x10000,0x80000600,0x0,0x80000000,0x80000000,0x10000,0x80000600,0x10000,0x80000600,0x10000,0x0,0x10000,0x80000600,0x80000600,0x80000600,0x0,0x0,0x10000,0x80000600,0x0,0x80000600,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x80000600,0x0,0x80000000,0x80000600,0x80000600,0x7000,0x7000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x0,0x0,0xc0000000,0x0,0x0,0x0,0x0,0x0,0xc0040800,0x0,0x40000,0x40000,0xc0000800,0xc0000800,0xc0000800,0x0,0x40000000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x80,0x80,0x80,0x80,0x80,0x0,0x0,0x80,0x0,0x0,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x0,0x80,0x0,0x0,0x2000000,0x0,0x80,0x0,0x80,0x0,0x0,0x0,0x80,0x80,0x80,0x0,0x0,0x0,0x80,0x800,0x80,0x800,0x800,0x1f000,0x800,0x100,0x0,0x0,0xc000,0xc000,0x0,0x0,0x80,0x800,0x0,0x80,0x80,0x0,0x0,0x3e0100,0x3e0100,0x10000,0x3000,0x3000,0xc000,0xc000,0x3000,0x3000,0x400200,0x400200,0x200027f,0x400000,0x400000,0x400000,0x400000,0x400000,0x200327f,0x800,0x800,0x800,0x200327f,0x200327f,0x200327f,0x800,0x200003f,0x3f,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[12];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TrabalhoTipo(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TrabalhoTipo(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TrabalhoTipoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TrabalhoTipo(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TrabalhoTipoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TrabalhoTipo(TrabalhoTipoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TrabalhoTipoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[91];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 84; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 91; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
