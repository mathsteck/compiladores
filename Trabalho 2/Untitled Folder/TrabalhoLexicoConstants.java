/* Generated By:JavaCC: Do not edit this line. TrabalhoLexicoConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TrabalhoLexicoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BLOCKCOMMENT = 3;
  /** RegularExpression Id. */
  int LINECOMMENT = 4;
  /** RegularExpression Id. */
  int ELSE = 5;
  /** RegularExpression Id. */
  int ELSEDEF = 6;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int IFDEF = 8;
  /** RegularExpression Id. */
  int ELSIF = 9;
  /** RegularExpression Id. */
  int ELSIFDEF = 10;
  /** RegularExpression Id. */
  int WHILE = 11;
  /** RegularExpression Id. */
  int BREAK = 12;
  /** RegularExpression Id. */
  int RETURN = 13;
  /** RegularExpression Id. */
  int FOR = 14;
  /** RegularExpression Id. */
  int FUNCTION = 15;
  /** RegularExpression Id. */
  int TYPE = 16;
  /** RegularExpression Id. */
  int PROCEDURE = 17;
  /** RegularExpression Id. */
  int GLOBAL = 18;
  /** RegularExpression Id. */
  int PUBLIC = 19;
  /** RegularExpression Id. */
  int EXPORT = 20;
  /** RegularExpression Id. */
  int OVERRIDE = 21;
  /** RegularExpression Id. */
  int ATOM = 22;
  /** RegularExpression Id. */
  int INTEGER = 23;
  /** RegularExpression Id. */
  int SEQUENCE = 24;
  /** RegularExpression Id. */
  int OBJECT = 25;
  /** RegularExpression Id. */
  int NAMESPACE = 26;
  /** RegularExpression Id. */
  int CONSTANT = 27;
  /** RegularExpression Id. */
  int ENUM = 28;
  /** RegularExpression Id. */
  int BY = 29;
  /** RegularExpression Id. */
  int SWITCH = 30;
  /** RegularExpression Id. */
  int DO = 31;
  /** RegularExpression Id. */
  int THEN = 32;
  /** RegularExpression Id. */
  int CASE = 33;
  /** RegularExpression Id. */
  int CONTINUE = 34;
  /** RegularExpression Id. */
  int RETRY = 35;
  /** RegularExpression Id. */
  int EXIT = 36;
  /** RegularExpression Id. */
  int TO = 37;
  /** RegularExpression Id. */
  int WITH = 38;
  /** RegularExpression Id. */
  int WITHOUT = 39;
  /** RegularExpression Id. */
  int PROFILE = 40;
  /** RegularExpression Id. */
  int PROFILE_TIME = 41;
  /** RegularExpression Id. */
  int TRACE = 42;
  /** RegularExpression Id. */
  int BATCH = 43;
  /** RegularExpression Id. */
  int TYPE_CHECK = 44;
  /** RegularExpression Id. */
  int INDIRECT_INCLUDES = 45;
  /** RegularExpression Id. */
  int INLINE = 46;
  /** RegularExpression Id. */
  int WARNING = 47;
  /** RegularExpression Id. */
  int SAVE = 48;
  /** RegularExpression Id. */
  int RESTORE = 49;
  /** RegularExpression Id. */
  int STRICT = 50;
  /** RegularExpression Id. */
  int FALLTHRU = 51;
  /** RegularExpression Id. */
  int ENTRY = 52;
  /** RegularExpression Id. */
  int LOOP = 53;
  /** RegularExpression Id. */
  int GOTO = 54;
  /** RegularExpression Id. */
  int NOT = 55;
  /** RegularExpression Id. */
  int AND = 56;
  /** RegularExpression Id. */
  int OR = 57;
  /** RegularExpression Id. */
  int XOR = 58;
  /** RegularExpression Id. */
  int INCLUDE = 59;
  /** RegularExpression Id. */
  int AS = 60;
  /** RegularExpression Id. */
  int LABEL = 61;
  /** RegularExpression Id. */
  int COMMA = 62;
  /** RegularExpression Id. */
  int SEMICOLON = 63;
  /** RegularExpression Id. */
  int LPAREN = 64;
  /** RegularExpression Id. */
  int RPAREN = 65;
  /** RegularExpression Id. */
  int LCHAVE = 66;
  /** RegularExpression Id. */
  int RCHAVE = 67;
  /** RegularExpression Id. */
  int LCOLCH = 68;
  /** RegularExpression Id. */
  int RCOLCH = 69;
  /** RegularExpression Id. */
  int NEWLINE = 70;
  /** RegularExpression Id. */
  int INDENT = 71;
  /** RegularExpression Id. */
  int MUL_OP = 72;
  /** RegularExpression Id. */
  int ADD_OP = 73;
  /** RegularExpression Id. */
  int ASSIGN_OP = 74;
  /** RegularExpression Id. */
  int REL_OP = 75;
  /** RegularExpression Id. */
  int EQUAL_SIGN = 76;
  /** RegularExpression Id. */
  int ALPHA = 77;
  /** RegularExpression Id. */
  int DIGIT = 78;
  /** RegularExpression Id. */
  int USCORE = 79;
  /** RegularExpression Id. */
  int CHAR = 80;
  /** RegularExpression Id. */
  int ESCCHAR = 81;
  /** RegularExpression Id. */
  int NUMBER = 82;
  /** RegularExpression Id. */
  int STRING = 83;
  /** RegularExpression Id. */
  int IDENTIFIER = 84;
  /** RegularExpression Id. */
  int ATOMINTEGER = 85;
  /** RegularExpression Id. */
  int ATOMREAL = 86;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "<BLOCKCOMMENT>",
    "<LINECOMMENT>",
    "\"else\"",
    "\"elsedef\"",
    "\"if\"",
    "\"ifdef\"",
    "\"elsif\"",
    "\"elsifdef\"",
    "\"while\"",
    "\"break\"",
    "\"return\"",
    "\"for\"",
    "\"function\"",
    "\"type\"",
    "\"procedure\"",
    "\"global\"",
    "\"public\"",
    "\"export\"",
    "\"override\"",
    "\"atom\"",
    "\"integer\"",
    "\"sequence\"",
    "\"object\"",
    "\"namespace\"",
    "\"constant\"",
    "\"enum\"",
    "\"by\"",
    "\"switch\"",
    "\"do\"",
    "\"then\"",
    "\"case\"",
    "\"continue\"",
    "\"retry\"",
    "\"exit\"",
    "\"to\"",
    "\"with\"",
    "\"without\"",
    "\"profile\"",
    "\"profile_time\"",
    "\"trace\"",
    "\"batch\"",
    "\"type_check\"",
    "\"indirect_includes\"",
    "\"inline\"",
    "\"warning\"",
    "\"save\"",
    "\"restore\"",
    "\"strict\"",
    "\"fallthru\"",
    "\"entry\"",
    "\"loop\"",
    "\"goto\"",
    "\"not\"",
    "\"and\"",
    "\"or\"",
    "\"xor\"",
    "\"includfe\"",
    "\"as\"",
    "\"label\"",
    "\",\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"\\n\"",
    "\"\\t\"",
    "<MUL_OP>",
    "<ADD_OP>",
    "<ASSIGN_OP>",
    "<REL_OP>",
    "\"=\"",
    "<ALPHA>",
    "<DIGIT>",
    "\"_\"",
    "<CHAR>",
    "<ESCCHAR>",
    "<NUMBER>",
    "<STRING>",
    "<IDENTIFIER>",
    "<ATOMINTEGER>",
    "<ATOMREAL>",
  };

}
