/* Generated By:JavaCC: Do not edit this line. TrabalhoSemantico.java */
import java.util.*;

public class TrabalhoSemantico implements TrabalhoSemanticoConstants {

static Hashtable<Integer, Dado> TabelaSimb = new Hashtable<Integer, Dado>();
static Integer indexTabela = 0;
static Integer nivelCorrente = 0;
static String flagCategoria = "";
static Integer flagBranchStmt = 0;
static Integer nReturn = 0, procedureReturn = 0;
static Dado dado = new Dado();
static ArrayList <Integer> listaChaves = new ArrayList <Integer> ();
static Token valor = null;

    public static void main(String[] args){
        try{
            TrabalhoSemantico t = new TrabalhoSemantico(new java.io.FileInputStream(args[0]));
            t.initBuiltins();
            t.Start();
            imprimeTabela();
        } catch (java.io.FileNotFoundException ex) {
            System.out.println("Arquivo " + args[0] + " nao foi encontrado");
        } catch (ParseException ex) {
            System.out.println(ex.getMessage());
        } catch (TokenMgrError ex) {
            System.out.println(ex.getMessage());
        }
    }

/* Programa */
  static final public void Start() throws ParseException {
    Stmtblk();
    jj_consume_token(0);
  }

  static final public void Stmtblk() throws ParseException {
    Statement();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case BREAK:
      case RETURN:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case TYPE:
      case PROCEDURE:
      case GLOBAL:
      case PUBLIC:
      case EXPORT:
      case OVERRIDE:
      case CONSTANT:
      case ENUM:
      case SWITCH:
      case CONTINUE:
      case RETRY:
      case EXIT:
      case LOOP:
      case GOTO:
      case IDENTIFIER:
      case 74:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
  }

  static final public void Block() throws ParseException {
    Statementblock();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case BREAK:
      case RETURN:
      case FOR:
      case FOREACH:
      case GLOBAL:
      case PUBLIC:
      case EXPORT:
      case OVERRIDE:
      case CONSTANT:
      case ENUM:
      case SWITCH:
      case CONTINUE:
      case RETRY:
      case EXIT:
      case LOOP:
      case GOTO:
      case IDENTIFIER:
      case 74:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Statementblock();
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      Breakstmt();
      break;
    case RETURN:
      Return();
      break;
    case CONTINUE:
      Continuestmt();
      break;
    case RETRY:
      Retrystmt();
      break;
    case EXIT:
      Exitstmt();
      break;
    case FOR:
      Forstmt();
      break;
    case FOREACH:
      Foreachstmt();
      break;
    case WHILE:
      Whilestmt();
      break;
    case LOOP:
      Loopstmt();
      break;
    case GOTO:
      Gotostmt();
      break;
    case IF:
      Ifstmt();
      break;
    case SWITCH:
      Switchstmt();
      break;
    case FUNCTION:
    case TYPE:
    case PROCEDURE:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case IDENTIFIER:
    case 74:
      Look();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Statementblock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      Breakstmt();
      break;
    case RETURN:
      Return();
      break;
    case CONTINUE:
      Continuestmt();
      break;
    case RETRY:
      Retrystmt();
      break;
    case EXIT:
      Exitstmt();
      break;
    case FOR:
      Forstmt();
      break;
    case FOREACH:
      Foreachstmt();
      break;
    case WHILE:
      Whilestmt();
      break;
    case LOOP:
      Loopstmt();
      break;
    case GOTO:
      Gotostmt();
      break;
    case IF:
      Ifstmt();
      break;
    case SWITCH:
      Switchstmt();
      break;
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case IDENTIFIER:
    case 74:
      Lookblock();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Look() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 74:
      jj_consume_token(74);
      Expression();
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2)) {
        Assignwithop();
      } else if (jj_2_2(2)) {
        Call();
      } else if (jj_2_3(2)) {
        Scopedeclare();
      } else if (jj_2_4(2)) {
        Assignmono();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Assignmulti();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void Lookblock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 74:
      jj_consume_token(74);
      Expression();
      break;
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_5(2)) {
        Assignwithop();
      } else if (jj_2_6(2)) {
        Call();
      } else if (jj_2_7(2)) {
        Scopeblock();
      } else if (jj_2_8(2)) {
        Assignmono();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Assignmulti();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void Scopeblock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
      Scopemodifier();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Vardeclare();
      break;
    case CONSTANT:
      Constdeclare();
      break;
    case ENUM:
      Enumdeclare();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Breakstmt() throws ParseException {
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        Stringlit();
        break;
      case ATOMINTEGER:
      case ATOMREAL:
      case ATOMBINARY:
      case ATOMOCTAL:
      case ATOMDECIMAL:
      case ATOMHEXADECIMAL:
        Atomexpr();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void Continuestmt() throws ParseException {
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        Stringlit();
        break;
      case ATOMINTEGER:
      case ATOMREAL:
      case ATOMBINARY:
      case ATOMOCTAL:
      case ATOMDECIMAL:
      case ATOMHEXADECIMAL:
        Atomexpr();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void Retrystmt() throws ParseException {
    jj_consume_token(RETRY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        Stringlit();
        break;
      case ATOMINTEGER:
      case ATOMREAL:
      case ATOMBINARY:
      case ATOMOCTAL:
      case ATOMDECIMAL:
      case ATOMHEXADECIMAL:
        Atomexpr();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void Exitstmt() throws ParseException {
    jj_consume_token(EXIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        Stringlit();
        break;
      case ATOMINTEGER:
      case ATOMREAL:
      case ATOMBINARY:
      case ATOMOCTAL:
      case ATOMDECIMAL:
      case ATOMHEXADECIMAL:
        Atomexpr();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void Stringlit() throws ParseException {
    jj_consume_token(STRING);
  }

  static final public void Forstmt() throws ParseException {
    flagBranchStmt++;
    jj_consume_token(FOR);
    Foridx();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(FOR);
        flagBranchStmt--;
  }

  static final public void Foridx() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(75);
    Expression();
    jj_consume_token(TO);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      Expression();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void Foreachstmt() throws ParseException {
    flagBranchStmt++;
    jj_consume_token(FOREACH);
        flagBranchStmt++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(76);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case 92:
      Seqexpr();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(77);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(FOREACH);
        flagBranchStmt--;
  }

  static final public void Labelstmt() throws ParseException {
    jj_consume_token(LABEL);
    Stringlit();
  }

  static final public void Whilestmt() throws ParseException {
    flagBranchStmt++;
    jj_consume_token(WHILE);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(WHILE);
        flagBranchStmt--;
  }

  static final public void Loopstmt() throws ParseException {
    flagBranchStmt++;
    jj_consume_token(LOOP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(DO);
    Block();
    jj_consume_token(UNTIL);
    Expression();
    jj_consume_token(END);
    jj_consume_token(LOOP);
        flagBranchStmt--;
  }

  static final public void Gotostmt() throws ParseException {
    jj_consume_token(GOTO);
    Labelstmt();
  }

  static final public void Ifstmt() throws ParseException {
    flagBranchStmt++;
    Iftest();
    label_3:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_3;
      }
      Elsif();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      Else();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(IF);
        flagBranchStmt--;
  }

  static final public void Iftest() throws ParseException {
    jj_consume_token(IF);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  static final public void Elsif() throws ParseException {
    jj_consume_token(ELSIF);
    Expression();
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
  }

  static final public void Else() throws ParseException {
    jj_consume_token(ELSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
  }

  static final public void Switchstmt() throws ParseException {
    flagBranchStmt++;
    Switchtest();
    label_4:
    while (true) {
      Case();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      Caseelse();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(SWITCH);
        flagBranchStmt--;
  }

  static final public void Switchtest() throws ParseException {
    jj_consume_token(SWITCH);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      Labelstmt();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(DO);
  }

  static final public void Case() throws ParseException {
    jj_consume_token(CASE);
    Caselist();
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  static final public void Caselist() throws ParseException {
    Expression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_5;
      }
      jj_consume_token(78);
      Expression();
    }
  }

  static final public void Caseelse() throws ParseException {
    jj_consume_token(ELSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
  }

  static final public void Assignmono() throws ParseException {
    Varexp();
    jj_consume_token(75);
    Expression();
  }

  static final public void Assignmulti() throws ParseException {
    Varexp();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_6;
      }
      jj_consume_token(78);
      Varexp();
    }
    jj_consume_token(75);
    Expression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_7;
      }
      jj_consume_token(78);
      Expression();
    }
  }

  static final public void Assignwithop() throws ParseException {
    Varexp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 79:
      jj_consume_token(79);
      break;
    case 80:
      jj_consume_token(80);
      break;
    case 81:
      jj_consume_token(81);
      break;
    case 82:
      jj_consume_token(82);
      break;
    case 83:
      jj_consume_token(83);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(75);
    Expression();
  }

  static final public void Return() throws ParseException {
    if(flagBranchStmt == 0)
        nReturn++;

    procedureReturn++;
    jj_consume_token(RETURN);
    Expression();
  }

  static final public void Vardeclare() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    Identlist();
        atualizaCategoria(t.toString());
        Integer chave = buscaTipo(t.toString());

        if(chave > -1) {
            Dado builtin = TabelaSimb.get(chave);
            atualizaTipo(chave);
            atualizaNBytes(builtin.getNBytes());
        }
        listaChaves.clear();
  }

  static final public void Scopemodifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GLOBAL:
      jj_consume_token(GLOBAL);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case EXPORT:
      jj_consume_token(EXPORT);
      break;
    case OVERRIDE:
      jj_consume_token(OVERRIDE);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Identlist() throws ParseException {
    Ident();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_8;
      }
      jj_consume_token(78);
      Ident();
    }
  }

  static final public void Ident() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 75:
      jj_consume_token(75);
      Expression();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
        Dado tmp = new Dado();
        tmp.setIdentificador(t.toString());
        tmp.setNivel(nivelCorrente);

        if(valor != null && flagCategoria.equals("constant")) {
            tmp.setValor(valor.toString());
            valor = null;
        }

        insereTabela(tmp);
  }

  static final public void Constdeclare() throws ParseException {
    Token t;
    flagCategoria = "constant";
    t = jj_consume_token(CONSTANT);
    Identlist();
        atualizaCategoria(t.toString());
        listaChaves.clear();
        flagCategoria = "";
  }

  static final public void Enumdeclare() throws ParseException {
    jj_consume_token(ENUM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
    case IDENTIFIER:
      Enumval();
      break;
    case TYPE:
      Enumtype();
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Enumval() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      Enumdelta();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    Identlist();
  }

  static final public void Enumdelta() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 79:
    case 80:
    case 81:
    case 82:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
        break;
      case 80:
        jj_consume_token(80);
        break;
      case 82:
        jj_consume_token(82);
        break;
      case 81:
        jj_consume_token(81);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    Expression();
  }

  static final public void Enumtype() throws ParseException {
    jj_consume_token(TYPE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      Enumdelta();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    Identlist();
    jj_consume_token(END);
    jj_consume_token(TYPE);
  }

  static final public void Scopedeclare() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
      Scopemodifier();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      Procdeclare();
      break;
    case FUNCTION:
      Funcdeclare();
      break;
    case TYPE:
      Typedeclare();
      break;
    case IDENTIFIER:
      Vardeclare();
      break;
    case CONSTANT:
      Constdeclare();
      break;
    case ENUM:
      Enumdeclare();
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Procdeclare() throws ParseException {
    Dado dado;
    Token t, s;
    t = jj_consume_token(PROCEDURE);
    s = jj_consume_token(IDENTIFIER);
        dado = new Dado();
        dado.setIdentificador(s.toString());
        dado.setNivel(nivelCorrente);
        dado.setCategoria(t.toString());

        insereTabela(dado);
        listaChaves.clear();
        nivelCorrente++;
    jj_consume_token(76);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Paramlist();
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    jj_consume_token(77);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(PROCEDURE);
        listaChaves.clear();
        nivelCorrente--;

        if(procedureReturn > 0)
            System.out.println("Erro! Procedure n\u00e3o pode ter return!!");
        procedureReturn = 0;
  }

  static final public void Paramlist() throws ParseException {
    Parameter();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_9;
      }
      jj_consume_token(78);
      Parameter();
    }
  }

  static final public void Parameter() throws ParseException {
    Dado dado;
    Token t, n;
    t = jj_consume_token(IDENTIFIER);
    n = jj_consume_token(IDENTIFIER);
        Integer chave = buscaTipo(t.toString());

        if(chave > -1) {
            dado = new Dado();
            dado.setIdentificador(n.toString());
            dado.setNivel(nivelCorrente);
            dado.setTipo(chave);
            dado.setCategoria("parameter");

            insereTabela(dado);
        }
        else {
            System.out.println("Erro! Palavra reservada \u005c"" + t.toString() + "\u005c" n\u00e3o existe");
        }
  }

  static final public void Funcdeclare() throws ParseException {
    Dado dado;
    Token t, s;
    t = jj_consume_token(FUNCTION);
    s = jj_consume_token(IDENTIFIER);
        dado = new Dado();
        dado.setIdentificador(s.toString());
        dado.setNivel(nivelCorrente);
        dado.setCategoria(t.toString());

        insereTabela(dado);
        listaChaves.clear();
        nivelCorrente++;
    jj_consume_token(76);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Paramlist();
        dado.setNParametros(listaChaves.size());
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    jj_consume_token(77);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(FUNCTION);
        listaChaves.clear();
        nivelCorrente--;

        System.out.println("Returns: " + nReturn);
        if(nReturn < 1)
            System.out.println("Erro! Function precisa de retorno!");
        nReturn = 0;
  }

  static final public void Typedeclare() throws ParseException {
    jj_consume_token(TYPE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(76);
    Parameter();
    jj_consume_token(77);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BREAK:
    case RETURN:
    case FOR:
    case FOREACH:
    case GLOBAL:
    case PUBLIC:
    case EXPORT:
    case OVERRIDE:
    case CONSTANT:
    case ENUM:
    case SWITCH:
    case CONTINUE:
    case RETRY:
    case EXIT:
    case LOOP:
    case GOTO:
    case IDENTIFIER:
    case 74:
      Block();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(TYPE);
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 92:
      Seqexpr();
      break;
    case STRING:
    case IDENTIFIER:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
    case BIN:
    case 76:
      Binexpr();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Binexpr() throws ParseException {
    Relexpr();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case XOR:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_10;
      }
      Binop();
      Relexpr();
    }
  }

  static final public void Binop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Relexpr() throws ParseException {
    Concatexpr();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_11;
      }
      Relop();
      Concatexpr();
    }
  }

  static final public void Relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 84:
      jj_consume_token(84);
      break;
    case 85:
      jj_consume_token(85);
      break;
    case 86:
      jj_consume_token(86);
      break;
    case 87:
      jj_consume_token(87);
      break;
    case 75:
      jj_consume_token(75);
      break;
    case 88:
      jj_consume_token(88);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Concatexpr() throws ParseException {
    Sumsubexpr();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_12;
      }
      Concat();
      Sumsubexpr();
    }
  }

  static final public void Concat() throws ParseException {
    jj_consume_token(83);
  }

  static final public void Sumsubexpr() throws ParseException {
    Multidivexpr();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
      case 80:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_13;
      }
      Sumsub();
      Multidivexpr();
    }
  }

  static final public void Sumsub() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 79:
      jj_consume_token(79);
      break;
    case 80:
      jj_consume_token(80);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Multidivexpr() throws ParseException {
    Unaryexpr();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
      case 82:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_14;
      }
      Multidiv();
      Unaryexpr();
    }
  }

  static final public void Multidiv() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 82:
      jj_consume_token(82);
      break;
    case 81:
      jj_consume_token(81);
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Unaryexpr() throws ParseException {
    Lastexpr();
    if (jj_2_10(2)) {
      Unaryop();
      Lastexpr();
    } else {
      ;
    }
  }

  static final public void Unaryop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    case 80:
      jj_consume_token(80);
      break;
    case 79:
      jj_consume_token(79);
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Lastexpr() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      Atomexpr();
      break;
    case STRING:
      Stringlit();
      break;
    case BIN:
      jj_consume_token(BIN);
      break;
    case 76:
      jj_consume_token(76);
      Expression();
      jj_consume_token(77);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
      case 89:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          Variable();
          break;
        case 76:
          Callf();
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
        if(naoDeclarado(t.toString(), nivelCorrente))
            System.out.println("Erro! Vari\u00e1vel \u005c"" + t.toString() + "\u005c" n\u00e3o declarada no nivel atual!");
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Variable() throws ParseException {
    if (jj_2_11(3)) {
      Slice();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        label_15:
        while (true) {
          jj_consume_token(89);
          Expression();
          jj_consume_token(90);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 89:
            ;
            break;
          default:
            jj_la1[72] = jj_gen;
            break label_15;
          }
        }
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Varexp() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 89:
      if (jj_2_12(3)) {
        Slice();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          label_16:
          while (true) {
            jj_consume_token(89);
            Expression();
            jj_consume_token(90);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 89:
              ;
              break;
            default:
              jj_la1[74] = jj_gen;
              break label_16;
            }
          }
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
        if(naoDeclarado(t.toString(), nivelCorrente))
            System.out.println("Erro! Vari\u00e1vel \u005c"" + t.toString() + "\u005c" n\u00e3o declarada no nivel atual!");
  }

  static final public void Slice() throws ParseException {
    jj_consume_token(89);
    Expression();
    jj_consume_token(91);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case IDENTIFIER:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
    case BIN:
    case 76:
    case 92:
      Expression();
      break;
    case DOLAR:
      jj_consume_token(DOLAR);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(90);
  }

  static final public void Seqexpr() throws ParseException {
    jj_consume_token(92);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLAR:
    case STRING:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
    case 92:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
        jj_consume_token(DOLAR);
        break;
      case STRING:
      case ATOMINTEGER:
      case ATOMREAL:
      case ATOMBINARY:
      case ATOMOCTAL:
      case ATOMDECIMAL:
      case ATOMHEXADECIMAL:
      case 92:
        Objexpr();
        label_17:
        while (true) {
          if (jj_2_13(2)) {
            ;
          } else {
            break label_17;
          }
          jj_consume_token(78);
          Objexpr();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 78:
          jj_consume_token(78);
          jj_consume_token(DOLAR);
          break;
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    jj_consume_token(93);
  }

  static final public void Call() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(76);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case IDENTIFIER:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
    case BIN:
    case 76:
    case 92:
      Arglist();
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    jj_consume_token(77);
  }

  static final public void Callf() throws ParseException {
    jj_consume_token(76);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case IDENTIFIER:
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
    case BIN:
    case 76:
    case 92:
      Arglist();
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    jj_consume_token(77);
  }

  static final public void Arglist() throws ParseException {
    Expression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_18;
      }
      jj_consume_token(78);
      Expression();
    }
  }

  static final public void Objexpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOMINTEGER:
    case ATOMREAL:
    case ATOMBINARY:
    case ATOMOCTAL:
    case ATOMDECIMAL:
    case ATOMHEXADECIMAL:
      Atomexpr();
      break;
    case 92:
      Seqexpr();
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Atomexpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOMINTEGER:
      jj_consume_token(ATOMINTEGER);
      break;
    case ATOMREAL:
      jj_consume_token(ATOMREAL);
      break;
    case ATOMBINARY:
      jj_consume_token(ATOMBINARY);
      break;
    case ATOMOCTAL:
      jj_consume_token(ATOMOCTAL);
      break;
    case ATOMDECIMAL:
      jj_consume_token(ATOMDECIMAL);
      break;
    case ATOMHEXADECIMAL:
      jj_consume_token(ATOMHEXADECIMAL);
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Funcoes Auxiliares */
  static final public boolean naoDeclarado(String IdProcurado, Integer NivelProcurado) throws ParseException {
    Enumeration t = TabelaSimb.keys();
    Integer chave;
    Dado dado;
        while (t.hasMoreElements()) {
            chave = (Integer)t.nextElement();
            dado = TabelaSimb.get(chave);

            if(dado.getIdentificador().equals(IdProcurado) && dado.getNivel() == NivelProcurado){
                {if (true) return false;}/* ja existe na tabela*/
            }
        }
        /* pode ser adicionado futuramente na tabela */
        {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  static final public void insereTabela(Dado dado) throws ParseException {
        if(naoDeclarado(dado.getIdentificador(), dado.getNivel())){
            TabelaSimb.put(indexTabela, dado);
            listaChaves.add(indexTabela);
            indexTabela++;
        }
        else {
            System.out.println("Erro! Identificador \u005c"" + dado.getIdentificador() +  "\u005c" j\u00e1 declarado no n\u00edvel atual");
        }
  }

  static final public Integer buscaTipo(String Identifier) throws ParseException {
    Integer chave;
    Enumeration elemento = TabelaSimb.keys();
    Dado dado;
        while(elemento.hasMoreElements()) {
            chave = (Integer) elemento.nextElement();
            dado = TabelaSimb.get(chave);

            if(dado.getIdentificador().equals(Identifier))
                {if (true) return chave;}
        }
        {if (true) return -1;}
    throw new Error("Missing return statement in function");
  }

  static final public void imprimeTabela() throws ParseException {
    Integer chave;
    Enumeration elemento = TabelaSimb.keys();
    Dado dado;
        System.out.println("");
        System.out.println("id Ident Nivel Categ Tipo End NBytes Valor ClassT NParam");
        System.out.println("--------------------------------------------------------");
        while(elemento.hasMoreElements()) {
            chave = (Integer) elemento.nextElement();
            dado = TabelaSimb.get(chave);

            System.out.print(chave + ") " + dado.getIdentificador() + " " + dado.getNivel() + " " + dado.getCategoria() + " " + dado.getTipo());
            System.out.print(" " + dado.getEndereco() + " " + dado.getNBytes() + " " + dado.getValor() + " ");
            System.out.print(dado.getClasseTransf() + " " + dado.getNParametros() + "\u005cn");
        }

        System.out.println("");
  }

  static final public void atualizaCategoria(String Categoria) throws ParseException {
    Dado dado;
        for(Integer chave : listaChaves)
        {
            dado = TabelaSimb.get(chave);
            dado.setCategoria(Categoria);
        }
  }

  static final public void atualizaTipo(Integer Tipo) throws ParseException {
    Dado dado;
        for(Integer chave : listaChaves)
        {
            dado = TabelaSimb.get(chave);
            dado.setTipo(Tipo);
        }
  }

  static final public void atualizaNParam(Integer n) throws ParseException {
    Dado dado;
        for(Integer chave : listaChaves)
        {
            dado = TabelaSimb.get(chave);
            dado.setNParametros(n);
        }
  }

  static final public void atualizaNBytes(Integer nbytes) throws ParseException {
    Dado dado;
        for(Integer chave : listaChaves)
        {
            dado = TabelaSimb.get(chave);
            dado.setNBytes(nbytes);
        }
  }

  static final public void initBuiltins() throws ParseException {
        //Atom
        Dado atom = new Dado();
        atom.setIdentificador("atom");
        atom.setCategoria("tipo");
        atom.setTipo(indexTabela);
        // FIXME: Definir o tamanho em bytes
        atom.setNBytes(5);
        atom.setNivel(0);

        insereTabela(atom);

        //Integer
        Dado integer = new Dado();
        integer.setIdentificador("integer");
        integer.setCategoria("tipo");
        integer.setTipo(indexTabela);
        // FIXME: Definir o tamanho em bytes
        integer.setNBytes(4);
        integer.setNivel(0);

        insereTabela(integer);

        listaChaves.clear();
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_3R_33() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(BY)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(PROCEDURE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(CONSTANT)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(89)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    if (jj_3R_64()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(89)) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    Token xsp;
    if (jj_3R_91()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(92)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(91)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(75)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(ELSIF)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(76)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TrabalhoSemanticoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[86];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8bfff400,0x8bf1f400,0x8bfff400,0x8bf1f400,0x0,0x0,0x0,0x0,0xf00000,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8bf1f400,0x4000000,0x0,0x0,0x0,0x8bf1f400,0x0,0x8bf1f400,0x0,0x200,0x0,0x8bf1f400,0x8bf1f400,0x8bf1f400,0x40000000,0x200,0x0,0x8bf1f400,0x0,0x8bf1f400,0x0,0x0,0x0,0xf00000,0x0,0x0,0x4040000,0x4000000,0x0,0x0,0x4000000,0xf00000,0x30e0000,0x0,0x8bf1f400,0x0,0x0,0x8bf1f400,0x8bf1f400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x6003,0x6003,0x6003,0x6003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x6003,0x0,0x0,0x0,0x100000,0x6003,0x100000,0x6003,0x100000,0x0,0x100000,0x6003,0x6003,0x6003,0x0,0x0,0x100000,0x6003,0x0,0x6003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6003,0x0,0x0,0x6003,0x6003,0x0,0x70000,0x70000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x404,0x404,0x404,0x404,0x400,0x4,0x400,0x4,0x0,0x4,0x1fa,0x1fa,0x1fa,0x1fa,0x1fa,0x1fa,0x1fa,0x1fa,0x0,0x404,0x0,0x4,0x10000004,0x0,0x404,0x0,0x404,0x0,0x0,0x0,0x404,0x404,0x404,0x0,0x0,0x0,0x404,0x4000,0x404,0x4000,0x4000,0xf8000,0x0,0x4000,0x800,0x4,0x0,0x78000,0x78000,0x0,0x0,0x4,0x4,0x404,0x4000,0x4,0x404,0x404,0x100013fe,0x0,0x0,0x1f00800,0x1f00800,0x80000,0x18000,0x18000,0x60000,0x60000,0x18000,0x2001000,0x2001000,0x13fe,0x2000000,0x2000000,0x2000000,0x2000000,0x2000000,0x100013fe,0x4000,0x100001fa,0x100001fa,0x100013fe,0x100013fe,0x4000,0x100001fa,0x1f8,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[13];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TrabalhoSemantico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TrabalhoSemantico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TrabalhoSemanticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TrabalhoSemantico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TrabalhoSemanticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TrabalhoSemantico(TrabalhoSemanticoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TrabalhoSemanticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[94];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 86; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 94; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
