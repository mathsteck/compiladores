/* Generated By:JavaCC: Do not edit this line. gera_mepa.java */
import java.util.*;

public class gera_mepa implements gera_mepaConstants {
        static Hashtable<Integer, Dados> TabelaSimb = new Hashtable<Integer, Dados>();
        static Dados temp;
        static int cont = 0;

        static int cont_label = 2;
        static int ender = 0;
        static int ender_param = -5;
        static int nivelcorr = 0;
        static int nivel_num = 0;

        static int flag_writelong = 0;
        static int flag_readlong = 0;
        static int flag_writeline = 0;
        static int flag_menos = 0;
        static int flag_main = 0;
        static int flag_param = 0;

        static int num_param = 0;

        public static void main(String[] args)
        {
                try {
                        new gera_mepa(new java.io.FileInputStream(args[0])).Start();
                } catch (java.io.FileNotFoundException ex) {
                        System.out.println("Arquivo " + args[0] + "nao foi encontrado");
                        System.exit(-1);
                } catch (ParseException ex) {
                        System.out.println(ex.getMessage());
                        System.exit(-1);
                } catch (TokenMgrError ex) {
                        System.out.println(ex.getMessage());
                        System.exit(-1);
                }
        }

//Inicio
  static final public void Start() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case IDENT:
      Program();
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Programa
  static final public void Program() throws ParseException {
        int aux;
                TabelaSimb.put(cont++, new Dados("true", nivelcorr, "constante", "0", -1));
                TabelaSimb.put(cont++, new Dados("false", nivelcorr, "constante", "0", -1));
                Gera("null", "INPP", "null", "null");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      VariableDeclaration();
    }
                                  Gera("null", "DSVS", "L1", "null");
                                                                        ender = 0;
    ProcedureDeclaration();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      ProcedureDeclaration();
    }
                aux = BuscaN(0, "variavel"); Gera("null", "DMEM", String.valueOf(aux), "null");
                Gera("null", "PARA", "null", "null");
                Gera("null", "FIM", "null", "null");
                //Imprime(); 

  }

//Declarações
  static final public void ProcedureDeclaration() throws ParseException {
        int aux;
    jj_consume_token(VOID);
    ProcedureHeading();
    jj_consume_token(14);
    ProcedureBody();
    jj_consume_token(15);
                aux = BuscaN(nivelcorr, "variavel");
                if(aux != 0) {
                        Gera("null", "DMEM", String.valueOf(aux), "null");
                        Retira(nivelcorr, "variavel");
                }
                nivelcorr = 0;

                if(flag_main == 0)
                        Gera("null", "RTPR", String.valueOf(num_param), "null");
                num_param = 0;
  }

  static final public void ProcedureBody() throws ParseException {
    label_3:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_3;
      }
      VariableDeclaration();
    }
    StatementSequence();
  }

  static final public void ProcedureHeading() throws ParseException {
        Token t;
    t = jj_consume_token(IDENT);
                if( (t.image).equals("main") ){
                        flag_main = 1;
                        Gera("L1", "NADA", "null", "null");
                        TabelaSimb.put(cont++, new Dados(String.valueOf(t.image), nivelcorr, "procedimento", "L1", 0));
                }
         nivelcorr++;
    jj_consume_token(16);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      FormalParameters();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(17);
                if(!(t.image).equals("main")){
                        flag_main = 0;
                        TabelaSimb.put(cont++,new Dados(String.valueOf(t.image),(nivelcorr-1),"procedimento","L"+String.valueOf(cont_label),num_param));
                        Gera("L"+String.valueOf(cont_label++), "ENPR", "1", "null");
                }
  }

  static final public void FormalParameters() throws ParseException {
        int i, j;
        Token t[] = new Token[10];
         ender_param = -5; i = 0;
    t[i] = FPSection();
         num_param++; i++;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(18);
      t[i] = FPSection();
                                 num_param++; i++;
    }
                for(j = 0; j < i; j++){
                        TabelaSimb.put(cont++, new Dados(t[j].image, nivelcorr, "parametro", String.valueOf(ender_param-(i-1)), -1));
                        ender_param++;
                }
  }

  static final public Token FPSection() throws ParseException {
        Token t;
    Type();
    t = jj_consume_token(IDENT);
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void VariableDeclaration() throws ParseException {
    Type();
    IdentList();
    jj_consume_token(19);
  }

  static final public void IdentList() throws ParseException {
        Token t;
        int n;
    t = jj_consume_token(IDENT);
                TabelaSimb.put(cont++, new Dados(t.image, nivelcorr, "variavel", String.valueOf(ender), -1));
                ender++;
                n = 1;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      jj_consume_token(18);
      t = jj_consume_token(IDENT);
                TabelaSimb.put(cont++, new Dados(t.image, nivelcorr, "variavel", String.valueOf(ender), -1));
                ender++;
                n = n + 1;
    }
          Gera("null", "AMEM", String.valueOf(n), "null");
  }

  static final public void Type() throws ParseException {
    jj_consume_token(IDENT);
  }

//Comandos
  static final public void StatementSequence() throws ParseException {
    Statement();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case IDENT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      Statement();
    }
  }

  static final public void Statement() throws ParseException {
    if (jj_2_2(2)) {
      Assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        ProcedureCall();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

                                                                                                           //Mudei essa linha para verificar
  static final public void WhileStatement() throws ParseException {
        String aux, aux2;
    jj_consume_token(WHILE);
                Gera("L"+String.valueOf(cont_label), "NADA", "null", "null");
                aux = "L"+String.valueOf(cont_label++);
    jj_consume_token(16);
    Logical_OR();
    jj_consume_token(17);
                Gera("null", "DSVF", "L"+String.valueOf(cont_label), "null");
                aux2 = "L"+String.valueOf(cont_label++);
    jj_consume_token(14);
    StatementSequence();
    jj_consume_token(15);
                Gera("null", "DSVS", aux, "null");
                Gera(aux2, "NADA", "null", "null");
  }

  static final public void IfStatement() throws ParseException {
        Token t;
        String aux, aux2;
    t = jj_consume_token(IF);
    jj_consume_token(16);
    Logical_OR();
    jj_consume_token(17);
                Gera("null", "DSVF", "L"+String.valueOf(cont_label), "null");
                aux = "L"+String.valueOf(cont_label++);
    jj_consume_token(14);
    StatementSequence();
    jj_consume_token(15);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      t = jj_consume_token(ELSE);
                Gera("null", "DSVS", "L"+String.valueOf(cont_label), "null");
                aux2 = "L"+String.valueOf(cont_label++);
                Gera(aux, "NADA", "null", "null");
      jj_consume_token(14);
      StatementSequence();
      jj_consume_token(15);
          Gera(aux2, "NADA", "null", "null");
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                if((t.image).equals("if"))
                        Gera(aux, "NADA", "null", "null");
  }

  static final public void ProcedureCall() throws ParseException {
        Token t;
        int flag = 0;
    t = jj_consume_token(IDENT);
                if((t.image).equals("WriteLong")){
                        flag_writelong = 1;
                } else if((t.image).equals("ReadLong")){
                        Gera("null", "LEIT", "null", "null");
                        flag_readlong = 1;
                } else if((t.image).equals("WriteLine")){
                        Gera("null", "IMPR", "null", "null");
                        flag_writeline = 1;
                } else {
                        flag = 1;
                }
         flag_param = 1;
    jj_consume_token(16);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case IDENT:
    case 16:
    case 29:
    case 30:
    case 34:
      ExpList();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(17);
    jj_consume_token(19);
                if(flag == 1){
                        temp = Busca(String.valueOf(t.image));
                        if(flag_main == 1)
                                Gera("null", "CHPR", temp.endereco, String.valueOf(temp.nivel));
                        else
                                Gera("null", "CHPR", temp.endereco, "1");
                }
         flag_param = 0;
  }

  static final public void ExpList() throws ParseException {
    Logical_OR();
                if(flag_writelong == 1)
                        Gera("null", "IMPR", "null", "null");
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      jj_consume_token(18);
      Logical_OR();
                if(flag_writelong == 1)
                        Gera("null", "IMPR", "null", "null");
    }
          flag_writelong = 0;
  }

  static final public void Assignment() throws ParseException {
        Token t;
    t = Designator();
    jj_consume_token(20);
    Logical_OR();
    jj_consume_token(19);
                temp = Busca(String.valueOf(t.image));
                Gera("null", "ARMZ", String.valueOf(temp.nivel), String.valueOf(temp.endereco));
  }

//Expressões
  static final public void Logical_OR() throws ParseException {
    Logical_AND();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      jj_consume_token(21);
      Logical_AND();
    }
  }

  static final public void Logical_AND() throws ParseException {
    Expression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      jj_consume_token(22);
      Expression();
    }
  }

  static final public void Expression() throws ParseException {
        int flag = -1;
    EqualityExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
    case 24:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        jj_consume_token(23);
                flag = 0;
        break;
      case 24:
        jj_consume_token(24);
                                  flag = 1;
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpr();
                if(flag == 0)
                        Gera("null", "CMIG", "null", "null");
                if(flag == 1)
                        Gera("null", "CMDG", "null", "null");
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void EqualityExpr() throws ParseException {
        int flag = -1;
    SimpleExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
    case 26:
    case 27:
    case 28:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
               flag = 0;
        break;
      case 26:
        jj_consume_token(26);
                                  flag = 1;
        break;
      case 27:
        jj_consume_token(27);
                                                    flag = 2;
        break;
      case 28:
        jj_consume_token(28);
                                                                       flag = 3;
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SimpleExpr();
                if(flag == 0)
                        Gera("null", "CMME", "null", "null");
                if(flag == 1)
                        Gera("null", "CMEG", "null", "null");
                if(flag == 2)
                        Gera("null", "CMMA", "null", "null");
                if(flag == 3)
                        Gera("null", "CMAG", "null", "null");
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void SimpleExpr() throws ParseException {
        int flag = -1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
    case 30:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        break;
      case 30:
        jj_consume_token(30);
                    flag_menos = 1;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    Term();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
      case 30:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
               flag = 0;
        break;
      case 30:
        jj_consume_token(30);
                                 flag = 1;
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
                if(flag == 0)
                        Gera("null", "SOMA", "null", "null");
                if(flag == 1)
                        Gera("null", "SUBT", "null", "null");
    }
  }

  static final public void Term() throws ParseException {
        int flag = -1;
    Unary();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
      case 32:
      case 33:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
                       flag = 0;
        break;
      case 32:
        jj_consume_token(32);
                                         flag = 1;
        break;
      case 33:
        jj_consume_token(33);
                                                           flag = 2;
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Unary();
                if(flag == 0)
                        Gera("null", "MULT", "null", "null");
                if(flag == 1)
                        Gera("null", "DIVI", "null", "null");
                if(flag == 2)
                        Gera("null", "REST", "null", "null");
    }
  }

  static final public void Unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      Unary();
      break;
    case NUMBER:
    case IDENT:
    case 16:
      Factor();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Factor() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = Designator();
                temp = Busca(String.valueOf(t.image));
                if((temp.categoria).equals("variavel")){
                        if(flag_readlong == 0)
                                Gera("null", "CRVL", String.valueOf(temp.nivel), String.valueOf(temp.endereco));
                        else
                                Gera("null", "ARMZ", String.valueOf(temp.nivel), String.valueOf(temp.endereco));
                        flag_readlong = 0;
                        flag_readlong = 0;
                }
                if((temp.categoria).equals("constante")){
                        if((temp.nome).equals("true"))
                                Gera("null", "CRCT", String.valueOf(1), "null");
                        else
                                Gera("null", "CRCT", String.valueOf(0), "null");
                }
                if((temp.categoria).equals("parametro")){
                        Gera("null", "CRVL", String.valueOf(temp.nivel), String.valueOf(temp.endereco));
                }
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                if(flag_menos == 1)
                        Gera("null", "CRCT", "-"+String.valueOf(t.image), "null");
                else
                        Gera("null", "CRCT", String.valueOf(t.image), "null");
                flag_menos = 0;
      break;
    case 16:
      jj_consume_token(16);
      Logical_OR();
      jj_consume_token(17);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Token Designator() throws ParseException {
        Token t;
    t = jj_consume_token(IDENT);
                     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void Gera(String rotulo, String codigo, String par1, String par2) throws ParseException {
        if(rotulo == "null"){
                if(par1 == "null" && par2 == "null")
                        System.out.println("      " + codigo);
                else if(par2 == "null")
                        System.out.println("      " + codigo + " " + par1);
                else
                        System.out.println("      " + codigo + " " + par1 + "," + par2);
        } else {
                if(par1 == "null" && par2 == "null")
                        System.out.println("" + rotulo + ":   " + codigo);
                else if(par2 == "null")
                        System.out.println("" + rotulo + ":   " + codigo + " " + par1);
                else
                        System.out.println("" + rotulo + ":   " + codigo + " " + par1 + "," + par2);
        }
  }

  static final public Dados Busca(String NomeProcurado) throws ParseException {
        Enumeration t = TabelaSimb.keys();
        int temp;
        Dados temp2;
        while (t.hasMoreElements() == true) {
                temp = (int)t.nextElement();
                temp2 = (Dados)TabelaSimb.get(temp);

                if((temp2.nome).equals(NomeProcurado))
                        {if (true) return temp2;}
        }

        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public int BuscaN(int NivelProcurado, String CategoriaProcurada) throws ParseException {
        Enumeration t = TabelaSimb.keys();
        int temp, cont = 0;
        Dados temp2;
        while (t.hasMoreElements() == true) {
                temp = (int)t.nextElement();
                temp2 = (Dados)TabelaSimb.get(temp);

                if(temp2.nivel == NivelProcurado && (temp2.categoria).equals(CategoriaProcurada))
                        cont++;
        }

        {if (true) return cont;}
    throw new Error("Missing return statement in function");
  }

  static final public void Retira(int NivelProcurado, String CategoriaProcurada) throws ParseException {
        Enumeration t = TabelaSimb.keys();
        int temp, cont = 0;
        Dados temp2;
        while (t.hasMoreElements() == true) {
                temp = (int)t.nextElement();
                temp2 = (Dados)TabelaSimb.get(temp);

                if(temp2.nivel == NivelProcurado && (temp2.categoria).equals(CategoriaProcurada))
                        TabelaSimb.remove(temp);
        }
  }

  static final public void Imprime() throws ParseException {
        Enumeration t = TabelaSimb.keys();
        int temp;
        Dados temp2;
        while (t.hasMoreElements() == true) {
                temp = (int)t.nextElement();
                //System.out.println("temp: " + temp);
                temp2 = (Dados)TabelaSimb.get(temp);
                System.out.println(temp);
                System.out.println(" nome = " + temp2.nome);
                System.out.println(" nivel = " + temp2.nivel);
                System.out.println(" categoria = " + temp2.categoria);
                System.out.println(" endereco = " + temp2.endereco);
                System.out.println(" parametros = " + temp2.parametros);
        }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(11)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(20)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public gera_mepaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa01,0x800,0x200,0x800,0x40000,0x40000,0x940,0x940,0x80,0x60010c00,0x40000,0x200000,0x400000,0x1800000,0x1800000,0x1e000000,0x1e000000,0x60000000,0x60000000,0x60000000,0x60000000,0x80000000,0x80000000,0x10c00,0x10c00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x4,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public gera_mepa(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public gera_mepa(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new gera_mepaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public gera_mepa(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new gera_mepaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public gera_mepa(gera_mepaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(gera_mepaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
