/* Generated By:JavaCC: Do not edit this line. TrabalhoSemanticoTokenManager.java */
import java.util.*;

/** Token Manager. */
public class TrabalhoSemanticoTokenManager implements TrabalhoSemanticoConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xb0eabff3fda00L) != 0L)
         {
            jjmatchedKind = 62;
            return 78;
         }
         if ((active1 & 0x1000L) != 0L)
            return 0;
         if ((active0 & 0x1000000400L) != 0L)
         {
            jjmatchedKind = 62;
            return 90;
         }
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 58;
            return -1;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 62;
            return 104;
         }
         if ((active0 & 0x14000800000L) != 0L)
         {
            jjmatchedKind = 62;
            return 98;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 62;
            return 11;
         }
         if ((active0 & 0x900000000000L) != 0L)
         {
            jjmatchedKind = 62;
            return 83;
         }
         if ((active0 & 0x400402000L) != 0L)
         {
            jjmatchedKind = 62;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
            return 89;
         }
         if ((active0 & 0xb5fefbebffa00L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
            return 78;
         }
         if ((active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xa00041400400L) != 0L)
            return 78;
         return -1;
      case 2:
         if ((active0 & 0x8580000018000L) != 0L)
            return 78;
         if ((active0 & 0x307ffbebe7a00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return 78;
         }
         return -1;
      case 3:
         if ((active0 & 0x301b7989b7800L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 3;
            }
            return 78;
         }
         if ((active0 & 0x64826240200L) != 0L)
            return 78;
         return -1;
      case 4:
         if ((active0 & 0x1b9889b4000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
            return 78;
         }
         if ((active0 & 0x3000610003800L) != 0L)
            return 78;
         return -1;
      case 5:
         if ((active0 & 0xa9881b0000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
            return 78;
         }
         if ((active0 & 0x11000804000L) != 0L)
            return 78;
         return -1;
      case 6:
         if ((active0 & 0xa180010000L) != 0L)
            return 78;
         if ((active0 & 0x8081a0000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 6;
            }
            return 78;
         }
         return -1;
      case 7:
         if ((active0 & 0x900080000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 7;
            return 78;
         }
         if ((active0 & 0x8120000L) != 0L)
            return 78;
         return -1;
      case 8:
         if ((active0 & 0x900000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 8;
            return 78;
         }
         if ((active0 & 0x80000L) != 0L)
            return 78;
         return -1;
      case 9:
         if ((active0 & 0x800000000L) != 0L)
            return 78;
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 9;
            return 78;
         }
         return -1;
      case 10:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 10;
            return 78;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 36:
         return jjStopAtPos(0, 50);
      case 38:
         return jjStopAtPos(0, 79);
      case 40:
         return jjStopAtPos(0, 72);
      case 41:
         return jjStopAtPos(0, 73);
      case 42:
         return jjStopAtPos(0, 78);
      case 43:
         return jjStopAtPos(0, 75);
      case 44:
         return jjStopAtPos(0, 74);
      case 45:
         return jjStartNfaWithStates_0(0, 76, 0);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 47:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 61:
         return jjStopAtPos(0, 71);
      case 62:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 63:
         return jjStopAtPos(0, 70);
      case 91:
         return jjStopAtPos(0, 85);
      case 93:
         return jjStopAtPos(0, 86);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x900000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400402000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xc100000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000020200a00L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000000400L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1020000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x180080000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8010004000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x14000800000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xa42040000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000001000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 88);
      case 125:
         return jjStopAtPos(0, 89);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 46:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 61:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1006404000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8010004000L, active1, 0L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 78);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2001000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xa101000200000L, active1, 0L);
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 78);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 78);
         return jjMoveStringLiteralDfa2_0(active0, 0x4e0008118000L, active1, 0L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 78);
         return jjMoveStringLiteralDfa2_0(active0, 0x380082000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 78);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 78);
         return jjMoveStringLiteralDfa2_0(active0, 0x800040000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 78);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 78);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20801000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8120000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20180080000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040000L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 78);
         return jjMoveStringLiteralDfa3_0(active0, 0x12000010000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8004000a00L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 78);
         return jjMoveStringLiteralDfa3_0(active0, 0x2040410004000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000a0000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 78);
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 78);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 78);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000800010000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2011000000800L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 109:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 78);
         break;
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 78);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 111:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 78);
         break;
      case 112:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 78);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 78);
         return jjMoveStringLiteralDfa4_0(active0, 0x8008800000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000800000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 78);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 78);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 78);
         break;
      case 104:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 78);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2188000000L);
      case 107:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 78);
         break;
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 78);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 78);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x120000L);
      case 121:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 78);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800010000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 78);
         break;
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 78);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 78);
         return jjMoveStringLiteralDfa6_0(active0, 0x2008000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 78);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 78);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 78);
         break;
      case 104:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 78);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8080000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 78);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 78);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 78);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 78);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 107:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 78);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(11, 32, 78);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 128;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0xc00002a00000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(4, 8);
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(106);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(107);
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(110);
                  }
                  if (curChar == 48)
                     jjAddStates(15, 18);
                  break;
               case 89:
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(78);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(78);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(78);
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(78);
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(12);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(78);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(112);
                  else if (curChar == 45)
                     jjCheckNAddStates(19, 21);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(106);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(109);
                  }
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(107);
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(110);
                  }
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(78);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(78);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0xc00002a00000000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 8:
                  if ((0x3000100000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
               case 16:
                  if (curChar == 34 && kind > 61)
                     kind = 61;
                  break;
               case 12:
                  if ((0x3ff000100000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 9);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 15:
                  if ((0xfff002a000031ffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 17:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 22:
               case 27:
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 37:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  break;
               case 39:
                  if ((0xfff002a000031ffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 40:
                  if (curChar == 39 && kind > 61)
                     kind = 61;
                  break;
               case 44:
               case 49:
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 59:
                  if ((0xfff002a000031ffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 63:
               case 68:
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(106);
                  break;
               case 107:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(107);
                  break;
               case 108:
                  if (curChar == 45)
                     jjCheckNAddStates(4, 8);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(109);
                  break;
               case 110:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(110);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(112);
                  break;
               case 113:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(114);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(114);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(0, 3);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 117:
                  if (curChar == 46)
                     jjCheckNAdd(118);
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(118);
                  break;
               case 119:
                  if (curChar == 48)
                     jjAddStates(15, 18);
                  break;
               case 121:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 127;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(78);
                  }
                  else if ((0x5000000140000001L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(80);
                  }
                  if ((0x7eL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(106);
                  }
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 104;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 98;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 90;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  else if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 7:
               case 78:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(78);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(78);
                  break;
               case 104:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 0:
               case 106:
                  if ((0x7eL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(106);
                  break;
               case 98:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 1:
                  jjAddStates(19, 21);
                  break;
               case 6:
                  if ((0x5000000140000001L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 8:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if ((0x8000007eL & l) != 0L)
                     jjCheckNAddTwoStates(12, 9);
                  break;
               case 13:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if ((0x57ffffffc7ffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(25, 28);
                  break;
               case 20:
                  if (curChar == 110)
                     jjCheckNAddStates(22, 24);
                  break;
               case 21:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
               case 27:
               case 35:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 24:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 39:
                  if ((0x57ffffffc7ffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 41:
                  if (curChar == 92)
                     jjAddStates(29, 32);
                  break;
               case 42:
                  if (curChar == 110)
                     jjCheckNAddStates(12, 14);
                  break;
               case 43:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
               case 49:
               case 57:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 46:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 50:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x57ffffffc7ffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 60:
                  if (curChar == 92)
                     jjAddStates(33, 36);
                  break;
               case 61:
                  if (curChar == 110)
                     jjCheckNAddStates(9, 11);
                  break;
               case 62:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
               case 68:
               case 76:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 65:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 69:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 77:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(78);
                  break;
               case 79:
                  if (curChar != 95)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(80);
                  break;
               case 81:
                  if (curChar == 109 && kind > 62)
                     kind = 62;
                  break;
               case 82:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 84:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 114 && kind > 62)
                     kind = 62;
                  break;
               case 86:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 91:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 101 && kind > 62)
                     kind = 62;
                  break;
               case 93:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 99:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 116 && kind > 62)
                     kind = 62;
                  break;
               case 101:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 105:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 112:
                  if (curChar == 101)
                     jjAddStates(37, 38);
                  break;
               case 120:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 122:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 124:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 126:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 128 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   109, 112, 116, 117, 109, 106, 107, 110, 111, 59, 9, 60, 39, 40, 41, 120, 
   122, 124, 126, 1, 2, 4, 15, 18, 19, 20, 21, 24, 28, 42, 43, 46, 
   50, 61, 62, 65, 69, 113, 114, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\145\154\163\145", 
"\151\146", "\145\154\163\151\146", "\167\150\151\154\145", "\142\162\145\141\153", 
"\162\145\164\165\162\156", "\146\157\162", "\146\157\162\145\141\143\150", 
"\146\165\156\143\164\151\157\156", "\164\171\160\145", "\160\162\157\143\145\144\165\162\145", 
"\143\157\156\163\164\141\156\164", "\145\156\165\155", "\142\171", "\163\167\151\164\143\150", "\144\157", 
"\164\150\145\156", "\143\141\163\145", "\143\157\156\164\151\156\165\145", 
"\162\145\164\162\171", "\145\170\151\164", "\164\157", "\160\162\157\146\151\154\145", 
"\160\162\157\146\151\154\145\137\164\151\155\145", "\164\162\141\143\145", "\142\141\164\143\150", 
"\164\171\160\145\137\143\150\145\143\153", "\151\156\154\151\156\145", "\167\141\162\156\151\156\147", 
"\163\141\166\145", "\162\145\163\164\157\162\145", "\163\164\162\151\143\164", 
"\154\157\157\160", "\147\157\164\157", "\156\157\164", "\141\156\144", "\157\162", 
"\170\157\162", "\141\163", "\154\141\142\145\154", "\165\156\164\151\154", "\44", 
"\145\156\144", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\77", "\75", "\50", "\51", "\54", "\53", "\55", 
"\57", "\52", "\46", "\74", "\76", "\74\75", "\76\75", "\41\75", "\133", "\135", 
"\56\56", "\173", "\175", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "BLOCKCOMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xe40ffffffffffe01L, 0x3ffffffL, 
};
static final long[] jjtoSkip = {
   0x17eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x80L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[128];
static private final int[] jjstateSet = new int[256];
static protected char curChar;
/** Constructor. */
public TrabalhoSemanticoTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public TrabalhoSemanticoTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 128; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
