/* Generated By:JavaCC: Do not edit this line. TrabalhoSemanticoConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TrabalhoSemanticoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LINECOMMENT = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int ELSIF = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int BREAK = 13;
  /** RegularExpression Id. */
  int RETURN = 14;
  /** RegularExpression Id. */
  int FOR = 15;
  /** RegularExpression Id. */
  int FOREACH = 16;
  /** RegularExpression Id. */
  int FUNCTION = 17;
  /** RegularExpression Id. */
  int TYPE = 18;
  /** RegularExpression Id. */
  int PROCEDURE = 19;
  /** RegularExpression Id. */
  int GLOBAL = 20;
  /** RegularExpression Id. */
  int PUBLIC = 21;
  /** RegularExpression Id. */
  int EXPORT = 22;
  /** RegularExpression Id. */
  int OVERRIDE = 23;
  /** RegularExpression Id. */
  int CONSTANT = 24;
  /** RegularExpression Id. */
  int ENUM = 25;
  /** RegularExpression Id. */
  int BY = 26;
  /** RegularExpression Id. */
  int SWITCH = 27;
  /** RegularExpression Id. */
  int DO = 28;
  /** RegularExpression Id. */
  int THEN = 29;
  /** RegularExpression Id. */
  int CASE = 30;
  /** RegularExpression Id. */
  int CONTINUE = 31;
  /** RegularExpression Id. */
  int RETRY = 32;
  /** RegularExpression Id. */
  int EXIT = 33;
  /** RegularExpression Id. */
  int TO = 34;
  /** RegularExpression Id. */
  int PROFILE = 35;
  /** RegularExpression Id. */
  int PROFILE_TIME = 36;
  /** RegularExpression Id. */
  int TRACE = 37;
  /** RegularExpression Id. */
  int BATCH = 38;
  /** RegularExpression Id. */
  int TYPE_CHECK = 39;
  /** RegularExpression Id. */
  int INLINE = 40;
  /** RegularExpression Id. */
  int WARNING = 41;
  /** RegularExpression Id. */
  int SAVE = 42;
  /** RegularExpression Id. */
  int RESTORE = 43;
  /** RegularExpression Id. */
  int STRICT = 44;
  /** RegularExpression Id. */
  int LOOP = 45;
  /** RegularExpression Id. */
  int GOTO = 46;
  /** RegularExpression Id. */
  int NOT = 47;
  /** RegularExpression Id. */
  int AND = 48;
  /** RegularExpression Id. */
  int OR = 49;
  /** RegularExpression Id. */
  int XOR = 50;
  /** RegularExpression Id. */
  int AS = 51;
  /** RegularExpression Id. */
  int LABEL = 52;
  /** RegularExpression Id. */
  int UNTIL = 53;
  /** RegularExpression Id. */
  int DOLAR = 54;
  /** RegularExpression Id. */
  int END = 55;
  /** RegularExpression Id. */
  int ALPHA = 56;
  /** RegularExpression Id. */
  int DIGITDEC = 57;
  /** RegularExpression Id. */
  int DIGITHEX = 58;
  /** RegularExpression Id. */
  int DIGITOCT = 59;
  /** RegularExpression Id. */
  int DIGITBIN = 60;
  /** RegularExpression Id. */
  int USCORE = 61;
  /** RegularExpression Id. */
  int SYMBOL = 62;
  /** RegularExpression Id. */
  int CHAR = 63;
  /** RegularExpression Id. */
  int ESCCHAR = 64;
  /** RegularExpression Id. */
  int STRING = 65;
  /** RegularExpression Id. */
  int IDENTIFIER = 66;
  /** RegularExpression Id. */
  int ATOMINTEGER = 67;
  /** RegularExpression Id. */
  int ATOMREAL = 68;
  /** RegularExpression Id. */
  int ATOMBINARY = 69;
  /** RegularExpression Id. */
  int ATOMOCTAL = 70;
  /** RegularExpression Id. */
  int ATOMDECIMAL = 71;
  /** RegularExpression Id. */
  int ATOMHEXADECIMAL = 72;
  /** RegularExpression Id. */
  int BIN = 73;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int BLOCKCOMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\t\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 7>",
    "<LINECOMMENT>",
    "\"else\"",
    "\"if\"",
    "\"elsif\"",
    "\"while\"",
    "\"break\"",
    "\"return\"",
    "\"for\"",
    "\"foreach\"",
    "\"function\"",
    "\"type\"",
    "\"procedure\"",
    "\"global\"",
    "\"public\"",
    "\"export\"",
    "\"override\"",
    "\"constant\"",
    "\"enum\"",
    "\"by\"",
    "\"switch\"",
    "\"do\"",
    "\"then\"",
    "\"case\"",
    "\"continue\"",
    "\"retry\"",
    "\"exit\"",
    "\"to\"",
    "\"profile\"",
    "\"profile_time\"",
    "\"trace\"",
    "\"batch\"",
    "\"type_check\"",
    "\"inline\"",
    "\"warning\"",
    "\"save\"",
    "\"restore\"",
    "\"strict\"",
    "\"loop\"",
    "\"goto\"",
    "\"not\"",
    "\"and\"",
    "\"or\"",
    "\"xor\"",
    "\"as\"",
    "\"label\"",
    "\"until\"",
    "\"$\"",
    "\"end\"",
    "<ALPHA>",
    "<DIGITDEC>",
    "<DIGITHEX>",
    "<DIGITOCT>",
    "<DIGITBIN>",
    "\"_\"",
    "<SYMBOL>",
    "<CHAR>",
    "<ESCCHAR>",
    "<STRING>",
    "<IDENTIFIER>",
    "<ATOMINTEGER>",
    "<ATOMREAL>",
    "<ATOMBINARY>",
    "<ATOMOCTAL>",
    "<ATOMDECIMAL>",
    "<ATOMHEXADECIMAL>",
    "<BIN>",
    "\"?\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"&\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"[\"",
    "\"]\"",
    "\"..\"",
    "\"{\"",
    "\"}\"",
  };

}
